[{"F:\\reactjs\\prenotes\\src\\App.js":"1","F:\\reactjs\\prenotes\\src\\Navigation\\Navigation.js":"2","F:\\reactjs\\prenotes\\src\\components\\Exam\\Upload\\ExamUpload.jsx":"3","F:\\reactjs\\prenotes\\src\\context\\createDataContext.js":"4","F:\\reactjs\\prenotes\\src\\services\\httpService.js":"5","F:\\reactjs\\prenotes\\src\\components\\Notification\\Notification.jsx":"6","F:\\reactjs\\prenotes\\src\\components\\Profile\\Profile.jsx":"7","F:\\reactjs\\prenotes\\src\\components\\Home\\UserSlider.jsx":"8","F:\\reactjs\\prenotes\\src\\components\\Profile\\PersonalInfo.jsx":"9","F:\\reactjs\\prenotes\\src\\components\\Auth\\Signin.jsx":"10","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Books\\Books.jsx":"11","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Exampaper\\Exampaper.jsx":"12","F:\\reactjs\\prenotes\\src\\components\\Notes\\Upload\\NotesUpload.jsx":"13","F:\\reactjs\\prenotes\\src\\components\\Profile\\ChangePassword\\ChangePassword.jsx":"14","F:\\reactjs\\prenotes\\src\\components\\Messanger\\Messanger.jsx":"15","F:\\reactjs\\prenotes\\src\\context\\BooksContext.js":"16","F:\\reactjs\\prenotes\\src\\components\\Exam\\Search\\ExamSearch.jsx":"17","F:\\reactjs\\prenotes\\src\\components\\Home\\Home.jsx":"18","F:\\reactjs\\prenotes\\src\\components\\Navbar\\MenuItems.jsx":"19","F:\\reactjs\\prenotes\\src\\context\\SocketProvider.js":"20","F:\\reactjs\\prenotes\\src\\components\\Messanger\\ChatContainer.jsx":"21","F:\\reactjs\\prenotes\\src\\components\\Messanger\\ChatContacts.jsx":"22","F:\\reactjs\\prenotes\\src\\index.js":"23","F:\\reactjs\\prenotes\\src\\context\\AuthContext.js":"24","F:\\reactjs\\prenotes\\src\\helper\\SecureStorage.js":"25","F:\\reactjs\\prenotes\\src\\components\\Books\\Sell\\SellBook.jsx":"26","F:\\reactjs\\prenotes\\src\\components\\Home\\Feedback.jsx":"27","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Notes\\Notes.jsx":"28","F:\\reactjs\\prenotes\\src\\components\\Notes\\Search\\NotesSearch.jsx":"29","F:\\reactjs\\prenotes\\src\\components\\Navbar\\Navbar.jsx":"30","F:\\reactjs\\prenotes\\src\\components\\Books\\Buy\\BuyBook.jsx":"31","F:\\reactjs\\prenotes\\src\\components\\Auth\\Signup.jsx":"32","F:\\reactjs\\prenotes\\src\\components\\Footer\\Footer.jsx":"33","F:\\reactjs\\prenotes\\src\\context\\NotesContext.js":"34","F:\\reactjs\\prenotes\\src\\context\\ConversationsProvider.js":"35","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\MyUpload.jsx":"36","F:\\reactjs\\prenotes\\src\\helper\\useSessionStorage.js":"37","F:\\reactjs\\prenotes\\src\\components\\Tuition\\Reg\\Reg.jsx":"38","F:\\reactjs\\prenotes\\src\\components\\Tuition\\Find\\View.jsx":"39"},{"size":851,"mtime":1609214443191,"results":"40","hashOfConfig":"41"},{"size":2424,"mtime":1609086210903,"results":"42","hashOfConfig":"41"},{"size":7803,"mtime":1608697232450,"results":"43","hashOfConfig":"41"},{"size":547,"mtime":1607870751521,"results":"44","hashOfConfig":"41"},{"size":923,"mtime":1607839525268,"results":"45","hashOfConfig":"41"},{"size":6990,"mtime":1609084301152,"results":"46","hashOfConfig":"41"},{"size":2964,"mtime":1608653138021,"results":"47","hashOfConfig":"41"},{"size":6440,"mtime":1607591030778,"results":"48","hashOfConfig":"41"},{"size":19687,"mtime":1608699643572,"results":"49","hashOfConfig":"41"},{"size":2113,"mtime":1609071326176,"results":"50","hashOfConfig":"41"},{"size":3163,"mtime":1609088657158,"results":"51","hashOfConfig":"41"},{"size":5524,"mtime":1608864879453,"results":"52","hashOfConfig":"41"},{"size":4210,"mtime":1608864949360,"results":"53","hashOfConfig":"41"},{"size":2011,"mtime":1608864968077,"results":"54","hashOfConfig":"41"},{"size":2820,"mtime":1609056104888,"results":"55","hashOfConfig":"41"},{"size":823,"mtime":1608613209969,"results":"56","hashOfConfig":"41"},{"size":8632,"mtime":1608702342535,"results":"57","hashOfConfig":"41"},{"size":4871,"mtime":1609086800085,"results":"58","hashOfConfig":"41"},{"size":4202,"mtime":1609258799278,"results":"59","hashOfConfig":"41"},{"size":624,"mtime":1609003053102,"results":"60","hashOfConfig":"41"},{"size":3637,"mtime":1609053974815,"results":"61","hashOfConfig":"41"},{"size":1248,"mtime":1609050221262,"results":"62","hashOfConfig":"41"},{"size":219,"mtime":1607270798331,"results":"63","hashOfConfig":"41"},{"size":2060,"mtime":1609044907204,"results":"64","hashOfConfig":"41"},{"size":989,"mtime":1607935394705,"results":"65","hashOfConfig":"41"},{"size":5105,"mtime":1608610849035,"results":"66","hashOfConfig":"41"},{"size":2643,"mtime":1608223650918,"results":"67","hashOfConfig":"41"},{"size":3155,"mtime":1609088546514,"results":"68","hashOfConfig":"41"},{"size":8342,"mtime":1609087441317,"results":"69","hashOfConfig":"41"},{"size":1171,"mtime":1607914471486,"results":"70","hashOfConfig":"41"},{"size":5084,"mtime":1609075439924,"results":"71","hashOfConfig":"41"},{"size":15293,"mtime":1609261124429,"results":"72","hashOfConfig":"41"},{"size":327,"mtime":1607503403301,"results":"73","hashOfConfig":"41"},{"size":1358,"mtime":1608831317077,"results":"74","hashOfConfig":"41"},{"size":3166,"mtime":1609003836063,"results":"75","hashOfConfig":"41"},{"size":657,"mtime":1608811101478,"results":"76","hashOfConfig":"41"},{"size":628,"mtime":1609038541280,"results":"77","hashOfConfig":"41"},{"size":5504,"mtime":1609262561423,"results":"78","hashOfConfig":"41"},{"size":4982,"mtime":1609265126655,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zyjns1",{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"103"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"85"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"85"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\reactjs\\prenotes\\src\\App.js",[],"F:\\reactjs\\prenotes\\src\\Navigation\\Navigation.js",["178"],"import React, { useContext, useEffect } from \"react\";\r\nimport { message } from \"antd\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { Context as AuthContext } from \"../context/AuthContext\";\r\nimport Navbar from \"../components/Navbar/Navbar\";\r\nimport Footer from \"../components/Footer/Footer\";\r\nimport Home from \"../components/Home/Home\";\r\nimport Profile from \"../components/Profile/Profile\";\r\nimport Messanger from \"../components/Messanger/Messanger\";\r\nimport ExamSearch from \"../components/Exam/Search/ExamSearch.jsx\";\r\nimport ExamUpload from \"../components/Exam/Upload/ExamUpload.jsx\";\r\nimport NotesSearch from \"../components/Notes/Search/NotesSearch.jsx\";\r\nimport NotesUpload from \"../components/Notes/Upload/NotesUpload.jsx\";\r\nimport BuyBook from \"../components/Books/Buy/BuyBook\";\r\nimport SellBook from \"../components/Books/Sell/SellBook\";\r\nimport Notification from \"../components/Notification/Notification\";\r\nconst Navigation = () => {\r\n  const { tryLocalSignin, getUserDetails } = useContext(AuthContext);\r\n\r\n  const getUser = async () => {\r\n    const id = await tryLocalSignin();\r\n    if (id) getUserDetails(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n    message.config({\r\n      duration: 2,\r\n      maxCount: 1,\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"main-container\">\r\n      <Navbar />\r\n      <div className=\"app_container\">\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/myprofile\" exact component={Profile} />\r\n          <Route path=\"/myprofile/personalInfo\" exact component={Profile} />\r\n          <Route path=\"/myprofile/myuploads\" exact component={Profile} />\r\n          <Route path=\"/myprofile/changepassword\" exact component={Profile} />\r\n          <Route path=\"/notification\" component={Notification} />\r\n          <Route path=\"/messages\" component={Messanger} />\r\n          <Route path=\"/notes/search\" component={NotesSearch} />\r\n\r\n          <Route path=\"/notes/upload\" component={NotesUpload} />\r\n\r\n          <Route path=\"/exampapers/search\" component={ExamSearch} />\r\n          <Route path=\"/exampapers/upload\" component={ExamUpload} />\r\n          <Route path=\"/books/buy\" component={BuyBook} />\r\n          <Route path=\"/books/sell\" component={SellBook} />\r\n          <Route path=\"/messages\" component={Messanger} />\r\n        </Switch>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n",["179","180"],"F:\\reactjs\\prenotes\\src\\components\\Exam\\Upload\\ExamUpload.jsx",[],["181","182"],"F:\\reactjs\\prenotes\\src\\context\\createDataContext.js",["183"],"import React, { useReducer } from \"react\";\r\n\r\nexport default (reducer, actions, defaultValue) => {\r\n  const Context = React.createContext();\r\n\r\n  const Provider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, defaultValue);\r\n    const boundActions = {};\r\n\r\n    for (let key in actions) {\r\n      boundActions[key] = actions[key](dispatch);\r\n    }\r\n\r\n    return (\r\n      <Context.Provider value={{ state, ...boundActions }}>\r\n        {children}\r\n      </Context.Provider>\r\n    );\r\n  };\r\n  return { Context, Provider };\r\n};\r\n",["184","185"],"F:\\reactjs\\prenotes\\src\\services\\httpService.js",["186"],"import axios from \"axios\";\r\n\r\nconst BASE = process.env.REACT_APP_BASE_URL;\r\n\r\naxios.defaults.baseURL = BASE;\r\n// axios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\n// axios.interceptors.response.use(null, (error) => {\r\n//   const expectedError =\r\n//     error.response &&\r\n//     error.response.status >= 400 &&\r\n//     error.response.status < 500;\r\n//   if (!expectedError) {\r\n//     logger.log(error);\r\n//     toast.error(\"An unexpected error occurred\");\r\n//   }\r\n//   return Promise.reject(error);\r\n// });\r\naxios.interceptors.request.use(\r\n  async (config) => {\r\n    const token = await sessionStorage.getItem(\"preNotest\");\r\n\r\n    if (token) {\r\n      config.headers.Authorization = `Pre@Notes20 ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (err) => {\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n};\r\n",["187","188"],"F:\\reactjs\\prenotes\\src\\components\\Notification\\Notification.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Profile\\Profile.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Home\\UserSlider.jsx",[],["189","190"],"F:\\reactjs\\prenotes\\src\\components\\Profile\\PersonalInfo.jsx",["191"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Col,\r\n  DatePicker,\r\n  Form,\r\n  Input,\r\n  Radio,\r\n  Row,\r\n  message,\r\n  Modal,\r\n  Select,\r\n  Upload,\r\n} from \"antd\";\r\nimport { Context as AuthContext } from \"../../context/AuthContext\";\r\nimport http from \"../../services/httpService\";\r\nimport {\r\n  UserOutlined,\r\n  LoadingOutlined,\r\n  PlusOutlined,\r\n  EditOutlined,\r\n} from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nconst layout = {\r\n  labelCol: { span: 24 },\r\n  wrapperCol: { span: 24 },\r\n};\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nconst dateFormat = \"DD/MM/YYYY\";\r\n\r\nfunction getBase64(img, callback) {\r\n  const reader = new FileReader();\r\n  reader.addEventListener(\"load\", () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n}\r\n\r\nfunction beforeUpload(file) {\r\n  const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\r\n  if (!isJpgOrPng) {\r\n    message.error(\"You can only upload JPG/PNG file!\");\r\n  }\r\n  const isLt2M = file.size / 1024 / 1024 < 2;\r\n  if (!isLt2M) {\r\n    message.error(\"Image must smaller than 2MB!\");\r\n  }\r\n  return isJpgOrPng && isLt2M;\r\n}\r\n\r\nconst PersonalInfo = () => {\r\n  const { state, getUserDetails } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [visibleInfo, setVisibleInfo] = useState(false);\r\n  const [visibleEdu, setVisibleEdu] = useState(false);\r\n  const [visiblePic, setVisiblePic] = useState(false);\r\n  const [imageData, setImageData] = useState({\r\n    loading: false,\r\n    imgUrl: null,\r\n  });\r\n  const [disabledAddr, setDisabledAddr] = useState(0);\r\n  const BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const actionUrl = BASEURL + \"user/profile/\" + userData.iduser;\r\n\r\n  const [infoForm] = Form.useForm();\r\n  const [eduForm] = Form.useForm();\r\n  const [basicForm] = Form.useForm();\r\n  const [edForm] = Form.useForm();\r\n\r\n  const handleCancel = () => {\r\n    setVisibleInfo(false);\r\n    setVisibleEdu(false);\r\n  };\r\n\r\n  const handleIsHosteler = (e) => {\r\n    setDisabledAddr(e.target.value);\r\n  };\r\n\r\n  const handleBasicInfo = () => {\r\n    basicForm.setFieldsValue({\r\n      name: userData.name,\r\n      dob: moment(userData.dob),\r\n      mno: userData.mno,\r\n      gender: userData.gender,\r\n      email: userData.email,\r\n    });\r\n    setVisibleInfo(true);\r\n  };\r\n  const handleEdu = () => {\r\n    edForm.setFieldsValue({\r\n      institute: userData.institute,\r\n      branch: userData.branch,\r\n      sem: userData.sem,\r\n      batch: [moment(userData.batchStart), moment(userData.batchEnd)],\r\n      regno: userData.regno,\r\n      hosteler: userData.hosteler,\r\n      hostelAddress: userData.hosteler ? userData.hostelAddress : \" \",\r\n    });\r\n\r\n    setVisibleEdu(true);\r\n  };\r\n\r\n  const submitBasicInfo = (values) => {\r\n    console.log(\"Success:\", values);\r\n\r\n    http\r\n      .put(\"user/updateprofile/\" + userData.iduser, values)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        getUserDetails(res.userId);\r\n        basicForm.resetFields();\r\n        setVisibleInfo(false);\r\n        message.success(\"Profile Updated Successfully\", 3);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const submitEdu = (values) => {\r\n    console.log(\"Success:\", values);\r\n    let data = {\r\n      ...values,\r\n\r\n      batchStart: values.batch[0],\r\n      batchEnd: values.batch[1],\r\n      hostelAddress: values.hosteler ? values.hostelAddress : null,\r\n    };\r\n    delete data.batch;\r\n    http\r\n      .put(\"user/updateEdu/\" + userData.iduser, data)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        getUserDetails(res.userId);\r\n        edForm.resetFields();\r\n        setVisibleEdu(false);\r\n        message.success(\"Education Updated Successfully\", 3);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleChange = (info) => {\r\n    setImageData({ loading: true, imgUrl: null });\r\n    if (info.file.status === \"done\") {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, (imageUrl) =>\r\n        setImageData({ loading: false, imgUrl: imageUrl })\r\n      );\r\n      getUserDetails(userData.iduser);\r\n      message.success(\"Profile Image Updated Successfully\", 3);\r\n      setVisiblePic(false);\r\n    }\r\n    if (info.file.status === \"error\") {\r\n      message.error(\"Failed\", 3);\r\n    }\r\n  };\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {imageData.loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (userData) {\r\n      infoForm.setFieldsValue({\r\n        name: userData.name,\r\n        dob: moment(userData.dob).format(dateFormat),\r\n        mno: Number(userData.mno),\r\n        gender: userData.gender,\r\n        email: userData.email,\r\n      });\r\n      setDisabledAddr(userData.hosteler);\r\n      eduForm.setFieldsValue({\r\n        institute: userData.institute,\r\n        branch: userData.branch,\r\n        sem: Number(userData.sem),\r\n        batch: `${moment(userData.batchStart).format(\"YYYY\")} - ${moment(\r\n          userData.batchEnd\r\n        ).format(\"YYYY\")}`,\r\n        regno: userData.regno,\r\n        hosteler: userData.hosteler ? \"Yes\" : \"No\",\r\n        hostelAddress: userData.hosteler ? userData.hostelAddress : \" \",\r\n      });\r\n    }\r\n  }, [userData]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"innerWrapper\">\r\n        <div className=\"avatar_wrapper\">\r\n          <Avatar\r\n            size={{ xs: 64, sm: 64, md: 64, lg: 64, xl: 100, xxl: 100 }}\r\n            src={\r\n              userData.profileImg != null ? BASEURL + userData.profileImg : null\r\n            }\r\n            icon={<UserOutlined />}\r\n            key={userData.profileImg}\r\n          />\r\n          <Button className=\"btn\" onClick={() => setVisiblePic(true)}>\r\n            Change Photo\r\n          </Button>\r\n        </div>\r\n        <div className=\"heading_wrap\">\r\n          <h3>Basic Information</h3>\r\n          <div className=\"circle\" onClick={handleBasicInfo}>\r\n            <EditOutlined />\r\n          </div>\r\n        </div>\r\n\r\n        <Form form={infoForm} {...layout} layout=\"vertical\">\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Name\" name=\"name\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"DOB\" name=\"dob\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Mobile Number\" name=\"mno\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Gender\" name=\"gender\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Email\" name=\"email\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n\r\n        <div className=\"heading_wrap\">\r\n          <h3>Education</h3>\r\n          <div className=\"circle\" onClick={handleEdu}>\r\n            <EditOutlined />\r\n          </div>\r\n        </div>\r\n        <Form form={eduForm} {...layout} layout=\"vertical\">\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Institution\" name=\"institute\">\r\n                <Select size=\"large\" disabled>\r\n                  <Option value={1}>\r\n                    Sant Longowal Institute of Engineering and Technology\r\n                  </Option>\r\n                  <Option value={2}>Panjab University</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Branch\" name=\"branch\">\r\n                <Select size=\"large\" disabled>\r\n                  <Option value={1}>Mechanical Engineering</Option>\r\n                  <Option value={2}>Computer Science Engineering</Option>\r\n                  <Option value={3}>Electrical Engineering</Option>\r\n                  <Option value={4}>Civil Engineering</Option>\r\n                  <Option value={5}>Instrumentation Engineering</Option>\r\n                  <Option value={6}>Chemical Engineering</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Semester\" name=\"sem\">\r\n                <Select size=\"large\" disabled>\r\n                  <Option value={1}>1</Option>\r\n                  <Option value={2}>2</Option>\r\n                  <Option value={3}>3</Option>\r\n                  <Option value={4}>4</Option>\r\n                  <Option value={5}>5</Option>\r\n                  <Option value={6}>6</Option>\r\n                  <Option value={7}>7</Option>\r\n                  <Option value={8}>8</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label={\"Batch\"} name=\"batch\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Registration No.\" name=\"regno\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item name=\"hosteler\" label=\"Hosteler\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n\r\n      <Modal\r\n        visible={visibleInfo}\r\n        title=\"Basic Information\"\r\n        onCancel={handleCancel}\r\n        width={800}\r\n        footer={[\r\n          <Button key=\"submit\" type=\"primary\" onClick={basicForm.submit}>\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          form={basicForm}\r\n          {...layout}\r\n          layout=\"vertical\"\r\n          initialValues={{ remember: true }}\r\n          name=\"basic\"\r\n          onFinish={submitBasicInfo}\r\n        >\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Name\"\r\n                name=\"name\"\r\n                rules={[{ required: true, message: \"Please input your name!\" }]}\r\n              >\r\n                <Input autoComplete=\"off\" size=\"large\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"DOB\"\r\n                name=\"dob\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <DatePicker\r\n                  allowClear={false}\r\n                  style={{ width: \"100%\" }}\r\n                  format={dateFormat}\r\n                  size=\"large\"\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Mobile Number\"\r\n                name=\"mno\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your mobile number!\",\r\n                  },\r\n                  {\r\n                    minLength: 10,\r\n                    maxLength: 10,\r\n                    pattern: \"^[0-9]{10}$\",\r\n                    message: \"Must be 10 digits\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input type=\"tel\" size=\"large\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Gender\"\r\n                name=\"gender\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <Radio.Group\r\n                  optionType=\"button\"\r\n                  buttonStyle=\"solid\"\r\n                  size=\"large\"\r\n                >\r\n                  <Radio.Button value=\"Male\">Male</Radio.Button>\r\n                  <Radio.Button value=\"Female\">Female</Radio.Button>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your username!\",\r\n                  },\r\n                  { type: \"email\", message: \"Please input valid email!\" },\r\n                ]}\r\n              >\r\n                <Input autoComplete=\"off\" size=\"large\" />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n      <Modal\r\n        visible={visibleEdu}\r\n        title=\"Education\"\r\n        onCancel={handleCancel}\r\n        width={800}\r\n        footer={[\r\n          <Button key=\"submit\" type=\"primary\" onClick={edForm.submit}>\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          form={edForm}\r\n          {...layout}\r\n          layout=\"vertical\"\r\n          initialValues={{ remember: true }}\r\n          name=\"basic\"\r\n          onFinish={submitEdu}\r\n        >\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Institution\"\r\n                name=\"institute\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <Select\r\n                  showSearch\r\n                  size=\"large\"\r\n                  placeholder=\"Select College\"\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.children\r\n                      .toLowerCase()\r\n                      .localeCompare(optionB.children.toLowerCase())\r\n                  }\r\n                >\r\n                  <Option value={1}>\r\n                    Sant Longowal Institute of Engineering and Technology\r\n                  </Option>\r\n                  <Option value={2}>Panjab University</Option>\r\n                  {/* <Option value={3}>Communicated</Option>\r\n                      <Option value={4}>Identified</Option> */}\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Branch\"\r\n                name=\"branch\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <Select\r\n                  showSearch\r\n                  size=\"large\"\r\n                  placeholder=\"Select Branch\"\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.children\r\n                      .toLowerCase()\r\n                      .localeCompare(optionB.children.toLowerCase())\r\n                  }\r\n                >\r\n                  <Option value={1}>Mechanical Engineering</Option>\r\n                  <Option value={2}>Computer Science Engineering</Option>\r\n                  <Option value={3}>Electrical Engineering</Option>\r\n                  <Option value={4}>Civil Engineering</Option>\r\n                  <Option value={5}>Instrumentation Engineering</Option>\r\n                  <Option value={6}>Chemical Engineering</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Semester\"\r\n                name=\"sem\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Required!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select size=\"large\">\r\n                  <Option value={1}>1</Option>\r\n                  <Option value={2}>2</Option>\r\n                  <Option value={3}>3</Option>\r\n                  <Option value={4}>4</Option>\r\n                  <Option value={5}>5</Option>\r\n                  <Option value={6}>6</Option>\r\n                  <Option value={7}>7</Option>\r\n                  <Option value={8}>8</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label={\"Batch\"}\r\n                name=\"batch\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <RangePicker\r\n                  style={{ width: \"100%\" }}\r\n                  picker=\"year\"\r\n                  size=\"large\"\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Registration No.\"\r\n                name=\"regno\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <Input autoComplete=\"off\" size=\"large\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                name=\"hosteler\"\r\n                label=\"Hosteler\"\r\n                rules={[{ required: true, message: \"Please pick an item!\" }]}\r\n              >\r\n                <Radio.Group\r\n                  optionType=\"button\"\r\n                  buttonStyle=\"solid\"\r\n                  size=\"large\"\r\n                  onChange={handleIsHosteler}\r\n                >\r\n                  <Radio.Button value={1}>Yes</Radio.Button>\r\n                  <Radio.Button value={0}>No</Radio.Button>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                name=\"hostelAddress\"\r\n                label=\"Hostel Address\"\r\n                rules={[{ required: disabledAddr, message: \"Required!\" }]}\r\n              >\r\n                <Input.TextArea\r\n                  maxLength={250}\r\n                  rows={2}\r\n                  disabled={!disabledAddr}\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n\r\n      <Modal\r\n        visible={visiblePic}\r\n        title=\"Change Profile Image\"\r\n        onCancel={() => setVisiblePic(false)}\r\n        footer={null}\r\n        style={{ textAlign: \"center\", maxWidth: \"300px\" }}\r\n      >\r\n        <Upload\r\n          name=\"photo\"\r\n          listType=\"picture-card\"\r\n          className=\"avatar-uploader\"\r\n          showUploadList={false}\r\n          action={actionUrl}\r\n          beforeUpload={beforeUpload}\r\n          onChange={handleChange}\r\n        >\r\n          {imageData.imgUrl ? (\r\n            <img\r\n              src={imageData.imgUrl}\r\n              alt=\"avatar\"\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          ) : (\r\n            uploadButton\r\n          )}\r\n        </Upload>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonalInfo;\r\n","F:\\reactjs\\prenotes\\src\\components\\Auth\\Signin.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Books\\Books.jsx",["192"],"import { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Image,\r\n  Popconfirm,\r\n  Row,\r\n  message,\r\n} from \"antd\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { Context as AuthContext } from \"../../../../context/AuthContext\";\r\nimport { Context as BookContext } from \"../../../../context/BooksContext\";\r\nimport http from \"../../../../services/httpService\";\r\nconst Books = () => {\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const {\r\n    state: { userData },\r\n  } = useContext(AuthContext);\r\n\r\n  const {\r\n    state: { booksData },\r\n    getBooks,\r\n  } = useContext(BookContext);\r\n\r\n  const deleteBook = (id) => {\r\n    http\r\n      .delete(\"upload/delbook/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Deleted Successfully\", 3);\r\n        getBooks(userData.iduser);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getBooks(userData.iduser);\r\n    else return;\r\n  }, [userData.iduser]);\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={[16, 16]}>\r\n        {booksData.length > 0\r\n          ? booksData.map((item) => {\r\n              return (\r\n                <Col md={12} xs={24}>\r\n                  <Card className=\"itemWrapper\">\r\n                    <Row gutter={8}>\r\n                      <Col md={6} xs={6}>\r\n                        <Avatar\r\n                          shape=\"square\"\r\n                          src={<Image src={BASEURL + item.fileLink} />}\r\n                        />\r\n                      </Col>\r\n                      <Col md={14} xs={18}>\r\n                        <h3>{item.bookName}</h3>\r\n                        <p>\r\n                          {item.authorName} by {item.publisherName}\r\n                        </p>\r\n                        <h3>Rs {item.price}</h3>\r\n                      </Col>\r\n                      <Col md={4} xs={24}>\r\n                        <div className=\"btnWrapper\">\r\n                          <Button\r\n                            type=\"link\"\r\n                            shape=\"circle\"\r\n                            icon={<EditOutlined />}\r\n                          />\r\n\r\n                          <Popconfirm\r\n                            placement=\"topRight\"\r\n                            title=\"\r\n                Are you sure you want to delete?\"\r\n                            onConfirm={() => deleteBook(item.idbook)}\r\n                            okText=\"Yes\"\r\n                            cancelText=\"No\"\r\n                          >\r\n                            <Button\r\n                              danger\r\n                              type=\"link\"\r\n                              shape=\"circle\"\r\n                              icon={<DeleteOutlined />}\r\n                            />\r\n                          </Popconfirm>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card>\r\n                </Col>\r\n              );\r\n            })\r\n          : \"\"}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Books;\r\n","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Exampaper\\Exampaper.jsx",["193","194","195","196","197","198"],"import { FileTextOutlined, UploadOutlined } from \"@ant-design/icons\";\r\nimport { Button, Card, Col, Form, message, Modal, Row, Upload } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Context as AuthContext } from \"../../../../context/AuthContext\";\r\nimport { Context as NotesContext } from \"../../../../context/NotesContext\";\r\nimport http from \"../../../../services/httpService\";\r\n\r\nfunction getBranch(id) {\r\n  switch (id) {\r\n    case 1:\r\n      return \"Mechanical Engg.\";\r\n    case 2:\r\n      return \"Computer Sci. Engg.\";\r\n    case 3:\r\n      return \"Electrical Engg.\";\r\n    case 4:\r\n      return \"Civil Engg.\";\r\n    case 5:\r\n      return \"Instrumentation Engg.\";\r\n    case 6:\r\n      return \"Chemical Engg.\";\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst Exampaper = () => {\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const {\r\n    state: { userData },\r\n  } = useContext(AuthContext);\r\n\r\n  const {\r\n    state: { examData },\r\n    getExampaper,\r\n  } = useContext(NotesContext);\r\n\r\n  const [form] = Form.useForm();\r\n  const [visibleModal, setVisibleModal] = useState(false);\r\n  const [examId, setExamId] = useState(-1);\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  function confirm() {\r\n    console.log(\"Clicked on Yes.\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getExampaper(userData.iduser);\r\n    else return;\r\n  }, [userData.iduser]);\r\n\r\n  const handleUpload = (id) => {\r\n    setExamId(id);\r\n    setVisibleModal(true);\r\n  };\r\n\r\n  const uploadSol = () => {\r\n    const formData = new FormData();\r\n    fileList.forEach((file) => {\r\n      formData.append(\"file\", file);\r\n    });\r\n    http\r\n      .post(\"exam/uploadsolution/\" + examId, formData)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setFileList([]);\r\n        setVisibleModal(false);\r\n        message.success(\" Uploaded Successfully\", 3);\r\n        getExampaper(userData.iduser);\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n  function beforeUpload(file) {\r\n    if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"image/jpeg\" ||\r\n      file.type === \"image/png\"\r\n    ) {\r\n      setFileList([file]);\r\n    } else {\r\n      message.error(\"Only pdf, jpeg, png\");\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function onRemove(file) {\r\n    setFileList([]);\r\n  }\r\n  return (\r\n    <div>\r\n      <Row gutter={[16, 16]}>\r\n        {examData.length > 0\r\n          ? examData.map((item) => {\r\n              return (\r\n                <Col key={item.idnotes} md={12} xs={24}>\r\n                  <div className=\"innerWrapper\">\r\n                    <Card className=\"itemWrapper\">\r\n                      <Row gutter={8}>\r\n                        <Col md={6} xs={6}>\r\n                          <div className=\"file-icon\">\r\n                            <FileTextOutlined />\r\n                          </div>\r\n                        </Col>\r\n                        <Col md={18} xs={18}>\r\n                          <h3>{item.subject}</h3>\r\n                          <p>{getBranch(item.branch)}</p>\r\n                        </Col>\r\n                        <Col md={12} sm={12} xs={24}>\r\n                          <div className=\"btn_wrapper\">\r\n                            <a\r\n                              href={BASEURL + item.quefileLink}\r\n                              target=\"_blank\"\r\n                            >\r\n                              <Button> View Exam Paper</Button>\r\n                            </a>\r\n                          </div>\r\n                        </Col>\r\n                        <Col md={12} sm={12} xs={24}>\r\n                          <div className=\"btn_wrapper\">\r\n                            {item.solfileLink != null &&\r\n                            item.solfileLink != \"\" ? (\r\n                              <a\r\n                                href={BASEURL + item.solfileLink}\r\n                                target=\"_blank\"\r\n                              >\r\n                                <Button> View Soultion</Button>\r\n                              </a>\r\n                            ) : (\r\n                              <Button onClick={() => handleUpload(item.idexam)}>\r\n                                Upload Soultion\r\n                              </Button>\r\n                            )}\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                    </Card>\r\n                  </div>\r\n                </Col>\r\n              );\r\n            })\r\n          : \"\"}\r\n      </Row>\r\n      <Modal\r\n        visible={visibleModal}\r\n        title=\"Upload Solution\"\r\n        onCancel={() => setVisibleModal(false)}\r\n        footer={[\r\n          <Button className=\"btn-primary\" onClick={uploadSol}>\r\n            Upload\r\n          </Button>,\r\n        ]}\r\n        style={{ textAlign: \"center\", maxWidth: \"300px\" }}\r\n      >\r\n        <Dragger\r\n          name=\"file\"\r\n          multiple={false}\r\n          fileList={fileList}\r\n          beforeUpload={beforeUpload}\r\n          onRemove={onRemove}\r\n        >\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <UploadOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">Click or Drag file here</p>\r\n        </Dragger>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Exampaper;\r\n","F:\\reactjs\\prenotes\\src\\components\\Notes\\Upload\\NotesUpload.jsx",["199"],"import { FilePdfOutlined } from \"@ant-design/icons\";\r\nimport { Button, Form, Input, message, Select, Upload } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Context as AuthContext } from \"../../../context/AuthContext\";\r\nimport http from \"../../../services/httpService\";\r\nimport \"./notesupload.css\";\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\nconst NotesUpload = () => {\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [form] = Form.useForm();\r\n  const [fileData, setFileData] = useState({\r\n    fileList: [],\r\n    uploading: false,\r\n  });\r\n\r\n  const handleUpload = (val) => {\r\n    const formData = new FormData();\r\n    fileData.fileList.forEach((file) => {\r\n      formData.append(\"file\", file);\r\n    });\r\n    formData.append(\"topic\", val.topic);\r\n    formData.append(\"iduser\", val.iduser);\r\n    formData.append(\"category\", val.category);\r\n    formData.append(\"description\", val.description);\r\n\r\n    http\r\n      .post(\"upload/pdf\", formData)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Notes Uploaded Successfully\", 3);\r\n        form.resetFields();\r\n        setFileData({ fileList: [], uploading: false });\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n  const onFinish = (val) => {\r\n    val.iduser = userData.iduser;\r\n    delete val.file;\r\n    handleUpload(val);\r\n  };\r\n\r\n  const props = {\r\n    name: \"file\",\r\n    onRemove: (file) => {\r\n      setFileData((prev) => {\r\n        const index = fileData.fileList.indexOf(file);\r\n        const newFileList = fileData.fileList.slice();\r\n        newFileList.splice(index, 1);\r\n        return {\r\n          ...prev,\r\n          fileList: newFileList,\r\n        };\r\n      });\r\n    },\r\n    beforeUpload: (file) => {\r\n      if (file.type === \"application/pdf\") {\r\n        setFileData({\r\n          fileList: [file],\r\n        });\r\n      } else {\r\n        message.error(\"Only pdf\");\r\n      }\r\n      return false;\r\n    },\r\n    fileList: fileData.fileList,\r\n    multiple: false,\r\n  };\r\n\r\n  return (\r\n    <div className=\"notes_wrapper\">\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={{ remember: true }}\r\n        name=\"basic\"\r\n        onFinish={onFinish}\r\n      >\r\n        <Form.Item\r\n          label=\"Select File\"\r\n          name=\"file\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Select File\",\r\n            },\r\n          ]}\r\n        >\r\n          <Dragger {...props}>\r\n            <p className=\"ant-upload-drag-icon\">\r\n              <FilePdfOutlined />\r\n            </p>\r\n            <p className=\"ant-upload-text\">Click or Drag file here</p>\r\n          </Dragger>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Topic\"\r\n          name=\"topic\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input your Topic!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input autoComplete=\"off\" size=\"large\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Category\"\r\n          name=\"category\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Required!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select size=\"large\">\r\n            <Option value={1}>Physics</Option>\r\n            <Option value={2}>Chemistry</Option>\r\n            <Option value={3}>Mathematics</Option>\r\n            <Option value={4}>Computer</Option>\r\n            <Option value={5}>Mechanical</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"Description\"\r\n          rules={[{ required: true, message: \"Required!\" }]}\r\n        >\r\n          <Input.TextArea maxLength={250} rows={2} />\r\n        </Form.Item>\r\n\r\n        <div className=\"btn_wrapper\">\r\n          <Button htmlType=\"submit\">Upload</Button>\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotesUpload;\r\n","F:\\reactjs\\prenotes\\src\\components\\Profile\\ChangePassword\\ChangePassword.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Messanger\\Messanger.jsx",["200"],"import { Col, Row, message } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Context as AuthContext } from \"../../context/AuthContext\";\r\nimport { SocketProvider } from \"../../context/SocketProvider.js\";\r\nimport ChatContacts from \"./ChatContacts.jsx\";\r\nimport ChatContainer from \"./ChatContainer.jsx\";\r\nimport http from \"../../services/httpService\";\r\nimport useSessionStorage from \"../../helper/useSessionStorage\";\r\nimport mailImg from \"../../assets/images/mail.png\";\r\nimport \"./messanger.css\";\r\n\r\nconst Messanger = () => {\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [id, setId] = useState(-1);\r\n  const [contactLists, setContactsList] = useSessionStorage(\"contacts\", []);\r\n  const [friendDetails, setFriendDetails] = useState({\r\n    id: null,\r\n    userDetails: { name: null, profileImg: null },\r\n    roomId: null,\r\n  });\r\n  console.log(\"friendDetails\", friendDetails);\r\n  const fetchContacts = (id) => {\r\n    http\r\n      .get(\"contacts/contacts/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        console.log(res.contactsData);\r\n        if (res.contactsData.length > 0) {\r\n          console.log(res.contactsData[0].uuid);\r\n          setId(res.contactsData[0].uuid);\r\n          if (res.contactsData[0].contacts) {\r\n            setContactsList(res.contactsData[0].contacts);\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) fetchContacts(userData.iduser);\r\n    console.log(\"m id\", userData.iduser);\r\n  }, [userData.iduser]);\r\n\r\n  return (\r\n    <SocketProvider id={id}>\r\n      <div className=\"msg_wrapper\">\r\n        <Row gutter={[4, 4]}>\r\n          <Col md={6} xs={24}>\r\n            <ChatContacts\r\n              contactLists={contactLists}\r\n              setFriendDetails={setFriendDetails}\r\n            />\r\n          </Col>\r\n          <Col md={18} xs={24}>\r\n            {friendDetails.id ? (\r\n              <ChatContainer id={id} friendDetails={friendDetails} />\r\n            ) : (\r\n              <div className=\"nomessages\">\r\n                <div className=\"nomsg_body\">\r\n                  <img className=\"mail\" src={mailImg} alt=\"Mail Png\" />\r\n                  <p className=\"title\">No message yet.</p>\r\n                  <p className=\"subtitle\">\r\n                    Once you connect, your messages will be displayed here.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </SocketProvider>\r\n  );\r\n};\r\n\r\nexport default Messanger;\r\n","F:\\reactjs\\prenotes\\src\\context\\BooksContext.js",[],"F:\\reactjs\\prenotes\\src\\components\\Exam\\Search\\ExamSearch.jsx",["201","202","203","204"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Modal,\r\n  Select,\r\n  Upload,\r\n} from \"antd\";\r\n\r\nimport bg from \"../../../assets/bg/books.png\";\r\n\r\nimport http from \"../../../services/httpService\";\r\nimport \"./examsearch.css\";\r\nimport {\r\n  SearchOutlined,\r\n  FileTextOutlined,\r\n  UploadOutlined,\r\n} from \"@ant-design/icons\";\r\nconst { Option } = Select;\r\nconst { Dragger } = Upload;\r\nfunction getBranch(id) {\r\n  switch (id) {\r\n    case 1:\r\n      return \"Mechanical Engg.\";\r\n    case 2:\r\n      return \"Computer Sci. Engg.\";\r\n    case 3:\r\n      return \"Electrical Engg.\";\r\n    case 4:\r\n      return \"Civil Engg.\";\r\n    case 5:\r\n      return \"Instrumentation Engg.\";\r\n    case 6:\r\n      return \"Chemical Engg.\";\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\nconst ExamSearch = () => {\r\n  const BASEURL = process.env.REACT_APP_BASE_URL;\r\n\r\n  const [examPaperData, setExamPaperData] = useState([]);\r\n  const [form] = Form.useForm();\r\n  const [visibleModal, setVisibleModal] = useState(false);\r\n  const [examId, setExamId] = useState(-1);\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  const onFinish = (val) => {\r\n    http\r\n      .get(\"exam/searchexampaper\", {\r\n        params: {\r\n          ...val,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setExamPaperData(res.examPaperData);\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  const getAllExamPaper = () => {\r\n    http\r\n      .get(\"exam/allexampaper\")\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setExamPaperData(res.examPaperData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllExamPaper();\r\n    return () => {\r\n      setExamPaperData([]);\r\n    };\r\n  }, []);\r\n\r\n  const handleUpload = (id) => {\r\n    setExamId(id);\r\n    setVisibleModal(true);\r\n  };\r\n\r\n  const uploadSol = () => {\r\n    const formData = new FormData();\r\n    fileList.forEach((file) => {\r\n      formData.append(\"file\", file);\r\n    });\r\n    http\r\n      .post(\"exam/uploadsolution/\" + examId, formData)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setFileList([]);\r\n        setVisibleModal(false);\r\n        message.success(\" Uploaded Successfully\", 3);\r\n        getAllExamPaper();\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  function beforeUpload(file) {\r\n    if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"image/jpeg\" ||\r\n      file.type === \"image/png\"\r\n    ) {\r\n      setFileList([file]);\r\n    } else {\r\n      message.error(\"Only pdf, jpeg, png\");\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function onRemove(file) {\r\n    setFileList([]);\r\n  }\r\n  return (\r\n    <div className=\"ExamSearch_wrapper\">\r\n      <header>\r\n        <img src={bg} alt=\"image\" />\r\n        <div className=\"input_wrapper\">\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            initialValues={{ string: \"\" }}\r\n            name=\"basic\"\r\n            onFinish={onFinish}\r\n          >\r\n            <Row gutter={16}>\r\n              <Col md={13} sm={24} xs={24}>\r\n                <Form.Item name=\"string\">\r\n                  <Input\r\n                    placeholder=\"What are you looking for...\"\r\n                    autoComplete=\"off\"\r\n                    size=\"large\"\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col md={7} sm={12} xs={12}>\r\n                <Form.Item name=\"branch\">\r\n                  <Select\r\n                    showSearch\r\n                    size=\"large\"\r\n                    placeholder=\"Select Branch\"\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                      option.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                    filterSort={(optionA, optionB) =>\r\n                      optionA.children\r\n                        .toLowerCase()\r\n                        .localeCompare(optionB.children.toLowerCase())\r\n                    }\r\n                  >\r\n                    <Option value={1}>Mechanical Engineering</Option>\r\n                    <Option value={2}>Computer Science Engineering</Option>\r\n                    <Option value={3}>Electrical Engineering</Option>\r\n                    <Option value={4}>Civil Engineering</Option>\r\n                    <Option value={5}>Instrumentation Engineering</Option>\r\n                    <Option value={6}>Chemical Engineering</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              </Col>\r\n              <Col md={4} sm={12} xs={12}>\r\n                <Form.Item>\r\n                  <div className=\"btn_wrapper\">\r\n                    <Button htmlType=\"submit\" size=\"large\">\r\n                      <SearchOutlined />\r\n                    </Button>\r\n                  </div>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </header>\r\n      <main className=\"ExamSearch_body\">\r\n        <Row gutter={[16, 16]}>\r\n          {examPaperData.length > 0\r\n            ? examPaperData.map((item) => {\r\n                return (\r\n                  <Col key={item.idnotes} md={12} xs={24}>\r\n                    <div className=\"innerWrapper\">\r\n                      <Card className=\"itemWrapper\">\r\n                        <Row gutter={8}>\r\n                          <Col md={6} xs={6}>\r\n                            <div className=\"file-icon\">\r\n                              <FileTextOutlined />\r\n                            </div>\r\n                          </Col>\r\n                          <Col md={18} xs={18}>\r\n                            <h3>{item.subject}</h3>\r\n                            <p>{getBranch(item.branch)}</p>\r\n                          </Col>\r\n                          <Col md={12} sm={12} xs={24}>\r\n                            <div className=\"btn_wrapper\">\r\n                              <a\r\n                                href={BASEURL + item.quefileLink}\r\n                                target=\"_blank\"\r\n                              >\r\n                                <Button> View Exam Paper</Button>\r\n                              </a>\r\n                            </div>\r\n                          </Col>\r\n                          <Col md={12} sm={12} xs={24}>\r\n                            <div className=\"btn_wrapper\">\r\n                              {item.solfileLink != null &&\r\n                              item.solfileLink != \"\" ? (\r\n                                <a\r\n                                  href={BASEURL + item.solfileLink}\r\n                                  target=\"_blank\"\r\n                                >\r\n                                  <Button> View Soultion</Button>\r\n                                </a>\r\n                              ) : (\r\n                                <Button\r\n                                  onClick={() => handleUpload(item.idexam)}\r\n                                >\r\n                                  Upload Soultion\r\n                                </Button>\r\n                              )}\r\n                            </div>\r\n                          </Col>\r\n                        </Row>\r\n                      </Card>\r\n                    </div>\r\n                  </Col>\r\n                );\r\n              })\r\n            : \"\"}\r\n        </Row>\r\n      </main>\r\n      <Modal\r\n        visible={visibleModal}\r\n        title=\"Upload Solution\"\r\n        onCancel={() => setVisibleModal(false)}\r\n        footer={[\r\n          <Button className=\"btn-primary\" onClick={uploadSol}>\r\n            Upload\r\n          </Button>,\r\n        ]}\r\n        style={{ textAlign: \"center\", maxWidth: \"300px\" }}\r\n      >\r\n        <Dragger\r\n          name=\"file\"\r\n          multiple={false}\r\n          fileList={fileList}\r\n          beforeUpload={beforeUpload}\r\n          onRemove={onRemove}\r\n        >\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <UploadOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">Click or Drag file here</p>\r\n        </Dragger>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExamSearch;\r\n","F:\\reactjs\\prenotes\\src\\components\\Home\\Home.jsx",["205"],"F:\\reactjs\\prenotes\\src\\components\\Navbar\\MenuItems.jsx",["206"],"F:\\reactjs\\prenotes\\src\\context\\SocketProvider.js",[],["207","208"],"F:\\reactjs\\prenotes\\src\\components\\Messanger\\ChatContainer.jsx",["209","210"],"import { EllipsisOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Avatar, Button, Form, Input, message } from \"antd\";\r\nimport React, { useEffect, useCallback } from \"react\";\r\nimport { useSocket } from \"../../context/SocketProvider\";\r\nimport useSessionStorage from \"../../helper/useSessionStorage\";\r\nimport http from \"../../services/httpService\";\r\nconst BASEURL = process.env.REACT_APP_BASE_URL;\r\nconst ChatContainer = ({ id, friendDetails }) => {\r\n  const [form] = Form.useForm();\r\n  const [messageList, setMessagesList] = useSessionStorage(\"messages\", []);\r\n  const socket = useSocket();\r\n\r\n  const setRef = useCallback((node) => {\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true });\r\n    }\r\n  }, []);\r\n\r\n  const getMessages = (id) => {\r\n    http\r\n      .get(\"messages/msg/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        console.log(res.messages);\r\n        setMessagesList(res.messages);\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (friendDetails.roomId) getMessages(friendDetails.roomId);\r\n  }, [friendDetails.roomId]);\r\n\r\n  const handleSubmit = (val) => {\r\n    let data = {\r\n      sender: id,\r\n      recipient: friendDetails.id,\r\n      text: val.msg,\r\n      roomId: friendDetails.roomId,\r\n    };\r\n\r\n    socket.emit(\"send-message\", data);\r\n    setMessagesList((prev) => [...prev, { sender: id, text: val.msg }]);\r\n    form.resetFields();\r\n  };\r\n\r\n  const validateMessages = {\r\n    required: \"\",\r\n  };\r\n\r\n  const handleMessages = (msg) => {\r\n    setMessagesList((prev) => [...prev, msg]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"receive-message\", handleMessages);\r\n\r\n    return () => socket.off(\"receive-message\");\r\n  }, [socket]);\r\n  return (\r\n    <div className=\"msg_box\">\r\n      <header>\r\n        <div className=\"user\">\r\n          <Avatar\r\n            size={{ xs: 24, sm: 32, md: 40 }}\r\n            src={\r\n              friendDetails.userDetails.profileImg != null\r\n                ? BASEURL + friendDetails.userDetails.profileImg\r\n                : null\r\n            }\r\n          >\r\n            {friendDetails.userDetails.name\r\n              ? friendDetails.userDetails.name.charAt(0)\r\n              : \"\"}\r\n          </Avatar>\r\n          <p className=\"username\"> {friendDetails.userDetails.name}</p>\r\n        </div>\r\n        <EllipsisOutlined rotate={90} />\r\n      </header>\r\n      <div className=\"chat_container\">\r\n        <div className=\"messages\">\r\n          {messageList.map((item, i) => {\r\n            const lastMsg = messageList.length - 1 === i;\r\n            return (\r\n              <div\r\n                ref={lastMsg ? setRef : null}\r\n                key={i}\r\n                className={`${item.sender === id ? \"me\" : \"from\"}`}\r\n              >\r\n                {item.text}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <Form\r\n          form={form}\r\n          className=\"form\"\r\n          onFinish={handleSubmit}\r\n          validateMessages={validateMessages}\r\n        >\r\n          <Form.Item name=\"msg\" rules={[{ required: true }]}>\r\n            <Input.TextArea rows={1} />\r\n          </Form.Item>\r\n          <div className=\"btn\">\r\n            <Button shape=\"circle\" htmlType=\"submit\">\r\n              <SendOutlined />\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;\r\n","F:\\reactjs\\prenotes\\src\\components\\Messanger\\ChatContacts.jsx",[],"F:\\reactjs\\prenotes\\src\\index.js",[],["211","212"],"F:\\reactjs\\prenotes\\src\\context\\AuthContext.js",[],"F:\\reactjs\\prenotes\\src\\helper\\SecureStorage.js",[],"F:\\reactjs\\prenotes\\src\\components\\Books\\Sell\\SellBook.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Home\\Feedback.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Notes\\Notes.jsx",["213"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Button, Card, Col, Popconfirm, Row, message } from \"antd\";\r\nimport { Context as AuthContext } from \"../../../../context/AuthContext\";\r\nimport { Context as NotesContext } from \"../../../../context/NotesContext\";\r\nimport { EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport http from \"../../../../services/httpService\";\r\nfunction getCategory(id) {\r\n  switch (id) {\r\n    case 1:\r\n      return \"Physics\";\r\n    case 2:\r\n      return \"Chemistry\";\r\n    case 3:\r\n      return \"Mathematics\";\r\n    case 4:\r\n      return \"Computer\";\r\n    case 5:\r\n      return \"Mechanical\";\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nconst Notes = () => {\r\n  const {\r\n    state: { userData },\r\n  } = useContext(AuthContext);\r\n  const {\r\n    state: { notesData },\r\n    getNotes,\r\n  } = useContext(NotesContext);\r\n\r\n  const deleteNotes = (id) => {\r\n    http\r\n      .delete(\"upload/delNotes/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Deleted Successfully\", 3);\r\n        getNotes(userData.iduser);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getNotes(userData.iduser);\r\n    else return;\r\n  }, [userData.iduser]);\r\n  return (\r\n    <div>\r\n      <Row gutter={[16, 16]}>\r\n        {notesData.length > 0\r\n          ? notesData.map((item) => {\r\n              return (\r\n                <Col key={item.idnotes} md={12} xs={24}>\r\n                  <div className=\"innerWrapper\">\r\n                    <Card className=\"itemWrapper\">\r\n                      <Row gutter={8}>\r\n                        <Col md={18} xs={18}>\r\n                          <h3>{item.topic}</h3>\r\n                          <p>{getCategory(item.category)}</p>\r\n                        </Col>\r\n                        <Col md={6} xs={6}>\r\n                          <div className=\"btnWrapper\">\r\n                            <Button\r\n                              type=\"link\"\r\n                              shape=\"circle\"\r\n                              icon={<EditOutlined />}\r\n                            />\r\n\r\n                            <Popconfirm\r\n                              placement=\"topRight\"\r\n                              title=\"\r\n                        Are you sure you want to delete?\"\r\n                              onConfirm={() => deleteNotes(item.idnotes)}\r\n                              okText=\"Yes\"\r\n                              cancelText=\"No\"\r\n                            >\r\n                              <Button\r\n                                danger\r\n                                type=\"link\"\r\n                                shape=\"circle\"\r\n                                icon={<DeleteOutlined />}\r\n                              />\r\n                            </Popconfirm>\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                    </Card>\r\n                  </div>\r\n                </Col>\r\n              );\r\n            })\r\n          : \"\"}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n","F:\\reactjs\\prenotes\\src\\components\\Notes\\Search\\NotesSearch.jsx",["214","215","216","217","218"],"F:\\reactjs\\prenotes\\src\\components\\Navbar\\Navbar.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Books\\Buy\\BuyBook.jsx",["219","220","221"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Button, Card, Col, Row, Form, Input, message } from \"antd\";\r\n\r\nimport { Context as AuthContext } from \"../../../context/AuthContext\";\r\nimport http from \"../../../services/httpService\";\r\nimport bg from \"../../../assets/bg/books.png\";\r\n\r\nimport \"../../Notes/Search/notessearch.css\";\r\nimport \"./buybook.css\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\n\r\nconst BuyBook = () => {\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [booksData, setBooksData] = useState([]);\r\n  const [form] = Form.useForm();\r\n  const onFinish = (val) => {\r\n    let data = {\r\n      id: userData.iduser,\r\n      ...val,\r\n    };\r\n    http\r\n      .post(\"upload/searchBooks\", data)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        let filterData = res.booksData.filter(\r\n          (item) => item.institute === userData.institute\r\n        );\r\n        setBooksData(filterData);\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  const getAllBooks = (id) => {\r\n    http\r\n      .get(\"upload/allBooks/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        let filterData = res.booksData.filter(\r\n          (item) => item.institute === userData.institute\r\n        );\r\n        setBooksData(filterData);\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  const handleReq = (data) => {\r\n    if (!userData.iduser) {\r\n      return;\r\n    }\r\n    let formData = {\r\n      senderId: userData.iduser,\r\n      senderName: userData.name,\r\n      receiverId: data.iduser,\r\n      receiverStatus: 0,\r\n      forid: data.idbook,\r\n      title: data.bookName,\r\n      query: null,\r\n      for: 1,\r\n      status: 0,\r\n    };\r\n    http\r\n      .post(\"notification/notifi\", formData)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Your request was sent successfully\");\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getAllBooks(userData.iduser);\r\n  }, [userData.iduser]);\r\n\r\n  return (\r\n    <div className=\"notesSearch_wrapper\">\r\n      <header>\r\n        <img src={bg} alt=\"image\" />\r\n        <div className=\"input_wrapper\">\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            initialValues={{ topic: \"\" }}\r\n            name=\"basic\"\r\n            onFinish={onFinish}\r\n          >\r\n            <Row gutter={16}>\r\n              <Col md={20} sm={24} xs={24}>\r\n                <Form.Item name=\"text\">\r\n                  <Input\r\n                    placeholder=\"Enter Title, Author\"\r\n                    autoComplete=\"off\"\r\n                    size=\"large\"\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n\r\n              <Col md={4} sm={12} xs={12}>\r\n                <Form.Item>\r\n                  <div className=\"btn_wrapper\">\r\n                    <Button htmlType=\"submit\" size=\"large\">\r\n                      <SearchOutlined />\r\n                    </Button>\r\n                  </div>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </header>\r\n      <main className=\"booksSearch_body\">\r\n        <Row gutter={[16, 16]}>\r\n          {booksData.length > 0\r\n            ? booksData.map((item) => {\r\n                return (\r\n                  <Col md={8} xs={24}>\r\n                    <Card className=\"itemWrapper\">\r\n                      <div className=\"book_wrapper\">\r\n                        <img className=\"img\" src={BASEURL + item.fileLink} />\r\n\r\n                        <div className=\"book_body\">\r\n                          <div className=\"dec\">\r\n                            <p className=\"title\">{item.bookName}</p>\r\n                            <p className=\"subtitle\">{item.authorName}</p>\r\n                            <p className=\"subtitle\"> {item.publisherName} </p>\r\n                          </div>\r\n\r\n                          <p className=\"price\">₹ {item.price}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"btn-wrapper\">\r\n                        <Button onClick={() => handleReq(item)}>\r\n                          Send Request\r\n                        </Button>\r\n                      </div>\r\n                    </Card>\r\n                  </Col>\r\n                );\r\n              })\r\n            : \"\"}\r\n        </Row>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuyBook;\r\n","F:\\reactjs\\prenotes\\src\\components\\Auth\\Signup.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Footer\\Footer.jsx",[],"F:\\reactjs\\prenotes\\src\\context\\NotesContext.js",[],"F:\\reactjs\\prenotes\\src\\context\\ConversationsProvider.js",["222"],"F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\MyUpload.jsx",[],"F:\\reactjs\\prenotes\\src\\helper\\useSessionStorage.js",[],"F:\\reactjs\\prenotes\\src\\components\\Tuition\\Reg\\Reg.jsx",["223"],"import {\r\n  Button,\r\n  Form,\r\n  Col,\r\n  Input,\r\n  message,\r\n  InputNumber,\r\n  TimePicker,\r\n  Row,\r\n  Select,\r\n} from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Context as AuthContext } from \"../../../context/AuthContext\";\r\nimport http from \"../../../services/httpService\";\r\nimport \"./reg.css\";\r\nconst { Option } = Select;\r\n\r\nconst Reg = () => {\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = (val) => {\r\n    let data = {\r\n      iduser: userData.iduser,\r\n      ...val,\r\n    };\r\n    http\r\n      .post(\"tutor/regtutor\", data)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Submit Successfully\", 3);\r\n        form.resetFields();\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"tutor_wrapper\">\r\n      <h3>Enter Details</h3>\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={{ remember: true }}\r\n        name=\"basic\"\r\n        onFinish={onFinish}\r\n      >\r\n        <Row gutter={16}>\r\n          <Col md={12} sm={24} xs={24}>\r\n            <Form.Item\r\n              label=\"Tutor Name\"\r\n              name=\"tutorName\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input autoComplete=\"off\" size=\"large\" />\r\n            </Form.Item>\r\n          </Col>\r\n\r\n          <Col md={12} sm={24} xs={24}>\r\n            <Form.Item\r\n              label=\"Specialized Subject\"\r\n              name=\"subject\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input autoComplete=\"off\" size=\"large\" />\r\n            </Form.Item>\r\n          </Col>\r\n\r\n          <Col md={12} sm={24} xs={24}>\r\n            <Form.Item\r\n              label=\"Timing\"\r\n              name=\"timing\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required!\",\r\n                },\r\n              ]}\r\n            >\r\n              <TimePicker\r\n                use12Hours\r\n                size=\"large\"\r\n                style={{ width: \"100%\" }}\r\n                format=\"h:mm a\"\r\n                onChange={(val) => console.log(val)}\r\n              />\r\n            </Form.Item>\r\n          </Col>\r\n\r\n          <Col md={12} sm={24} xs={24}>\r\n            <Form.Item\r\n              label=\"Price\"\r\n              name=\"fees\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required!\",\r\n                },\r\n              ]}\r\n            >\r\n              <InputNumber min={0} size=\"large\" style={{ width: \"100%\" }} />\r\n            </Form.Item>\r\n          </Col>\r\n\r\n          <Col md={12} sm={24} xs={24}>\r\n            <Form.Item\r\n              name=\"loc\"\r\n              label=\"Location\"\r\n              rules={[{ required: true, message: \"Required!\" }]}\r\n            >\r\n              <Input autoComplete=\"off\" size=\"large\" />\r\n            </Form.Item>\r\n          </Col>\r\n\r\n          <Col md={12} sm={24} xs={24}>\r\n            <Form.Item\r\n              label=\"Contact no. (optional)\"\r\n              name=\"contact\"\r\n              rules={[\r\n                {\r\n                  minLength: 10,\r\n                  maxLength: 10,\r\n                  pattern: \"^[0-9]{10}$\",\r\n                  message: \"Must be 10 digits\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input type=\"tel\" size=\"large\" />\r\n            </Form.Item>\r\n          </Col>\r\n\r\n          <Col md={12} sm={24} xs={24}>\r\n            <Form.Item\r\n              label=\"Day\"\r\n              name=\"day\"\r\n              rules={[{ required: true, message: \"Required!\" }]}\r\n            >\r\n              <Input\r\n                placeholder=\"Sunday, Monday ..\"\r\n                autoComplete=\"off\"\r\n                size=\"large\"\r\n              />\r\n            </Form.Item>\r\n          </Col>\r\n          <Col md={12} sm={24} xs={24}>\r\n            <Form.Item\r\n              name=\"for\"\r\n              label=\"For\"\r\n              rules={[{ required: true, message: \"Required!\" }]}\r\n            >\r\n              <Select size=\"large\">\r\n                <Option value=\"Male\">Boys</Option>\r\n                <Option value=\"Female\">Girls</Option>\r\n                <Option value=\"All\">Both</Option>\r\n              </Select>\r\n            </Form.Item>\r\n          </Col>\r\n\r\n          <Col md={24} sm={24} xs={24}>\r\n            <Form.Item\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Required!\",\r\n                },\r\n                {\r\n                  type: \"email\",\r\n                  message: \"Please input valid email!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input autoComplete=\"off\" size=\"large\" />\r\n            </Form.Item>\r\n          </Col>\r\n        </Row>\r\n\r\n        <div className=\"btn_wrapper\">\r\n          <Button htmlType=\"submit\">Submit</Button>\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reg;\r\n","F:\\reactjs\\prenotes\\src\\components\\Tuition\\Find\\View.jsx",["224","225","226","227","228","229","230","231","232","233","234","235","236"],{"ruleId":"237","severity":1,"message":"238","line":31,"column":6,"nodeType":"239","endLine":31,"endColumn":8,"suggestions":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"241","replacedBy":"245"},{"ruleId":"243","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":3,"column":1,"nodeType":"249","endLine":21,"endColumn":3},{"ruleId":"241","replacedBy":"250"},{"ruleId":"243","replacedBy":"251"},{"ruleId":"247","severity":1,"message":"252","line":32,"column":1,"nodeType":"249","endLine":37,"endColumn":3},{"ruleId":"241","replacedBy":"253"},{"ruleId":"243","replacedBy":"254"},{"ruleId":"241","replacedBy":"255"},{"ruleId":"243","replacedBy":"256"},{"ruleId":"237","severity":1,"message":"257","line":192,"column":6,"nodeType":"239","endLine":192,"endColumn":16,"suggestions":"258"},{"ruleId":"237","severity":1,"message":"259","line":45,"column":6,"nodeType":"239","endLine":45,"endColumn":23,"suggestions":"260"},{"ruleId":"261","severity":1,"message":"262","line":41,"column":10,"nodeType":"263","messageId":"264","endLine":41,"endColumn":14},{"ruleId":"261","severity":1,"message":"265","line":46,"column":12,"nodeType":"263","messageId":"264","endLine":46,"endColumn":19},{"ruleId":"237","severity":1,"message":"266","line":53,"column":6,"nodeType":"239","endLine":53,"endColumn":23,"suggestions":"267"},{"ruleId":"268","severity":1,"message":"269","line":121,"column":31,"nodeType":"270","endLine":121,"endColumn":46},{"ruleId":"271","severity":1,"message":"272","line":130,"column":46,"nodeType":"273","messageId":"274","endLine":130,"endColumn":48},{"ruleId":"268","severity":1,"message":"269","line":133,"column":33,"nodeType":"270","endLine":133,"endColumn":48},{"ruleId":"261","severity":1,"message":"275","line":10,"column":9,"nodeType":"263","messageId":"264","endLine":10,"endColumn":16},{"ruleId":"237","severity":1,"message":"276","line":49,"column":6,"nodeType":"239","endLine":49,"endColumn":23,"suggestions":"277"},{"ruleId":"278","severity":1,"message":"279","line":141,"column":9,"nodeType":"280","endLine":141,"endColumn":37},{"ruleId":"268","severity":1,"message":"269","line":222,"column":33,"nodeType":"270","endLine":222,"endColumn":48},{"ruleId":"271","severity":1,"message":"272","line":231,"column":48,"nodeType":"273","messageId":"274","endLine":231,"endColumn":50},{"ruleId":"268","severity":1,"message":"269","line":234,"column":35,"nodeType":"270","endLine":234,"endColumn":50},{"ruleId":"278","severity":1,"message":"279","line":56,"column":15,"nodeType":"280","endLine":56,"endColumn":55},{"ruleId":"261","severity":1,"message":"281","line":2,"column":18,"nodeType":"263","messageId":"264","endLine":2,"endColumn":23},{"ruleId":"241","replacedBy":"282"},{"ruleId":"243","replacedBy":"283"},{"ruleId":"237","severity":1,"message":"284","line":38,"column":6,"nodeType":"239","endLine":38,"endColumn":28,"suggestions":"285"},{"ruleId":"237","severity":1,"message":"286","line":67,"column":6,"nodeType":"239","endLine":67,"endColumn":14,"suggestions":"287"},{"ruleId":"241","replacedBy":"288"},{"ruleId":"243","replacedBy":"289"},{"ruleId":"237","severity":1,"message":"290","line":52,"column":6,"nodeType":"239","endLine":52,"endColumn":23,"suggestions":"291"},{"ruleId":"237","severity":1,"message":"292","line":142,"column":6,"nodeType":"239","endLine":142,"endColumn":8,"suggestions":"293"},{"ruleId":"278","severity":1,"message":"279","line":147,"column":9,"nodeType":"280","endLine":147,"endColumn":37},{"ruleId":"268","severity":1,"message":"269","line":198,"column":57,"nodeType":"270","endLine":198,"endColumn":72},{"ruleId":"268","severity":1,"message":"269","line":222,"column":33,"nodeType":"270","endLine":222,"endColumn":48},{"ruleId":"268","severity":1,"message":"269","line":230,"column":33,"nodeType":"270","endLine":230,"endColumn":48},{"ruleId":"237","severity":1,"message":"294","line":91,"column":6,"nodeType":"239","endLine":91,"endColumn":23,"suggestions":"295"},{"ruleId":"278","severity":1,"message":"279","line":96,"column":9,"nodeType":"280","endLine":96,"endColumn":37},{"ruleId":"296","severity":1,"message":"297","line":137,"column":25,"nodeType":"280","endLine":137,"endColumn":78},{"ruleId":"298","severity":1,"message":"299","line":58,"column":74,"nodeType":"300","messageId":"301","endLine":58,"endColumn":76},{"ruleId":"261","severity":1,"message":"302","line":12,"column":29,"nodeType":"263","messageId":"264","endLine":12,"endColumn":37},{"ruleId":"261","severity":1,"message":"303","line":4,"column":3,"nodeType":"263","messageId":"264","endLine":4,"endColumn":9},{"ruleId":"261","severity":1,"message":"304","line":9,"column":3,"nodeType":"263","messageId":"264","endLine":9,"endColumn":8},{"ruleId":"261","severity":1,"message":"305","line":11,"column":3,"nodeType":"263","messageId":"264","endLine":11,"endColumn":8},{"ruleId":"261","severity":1,"message":"306","line":12,"column":3,"nodeType":"263","messageId":"264","endLine":12,"endColumn":9},{"ruleId":"261","severity":1,"message":"307","line":13,"column":3,"nodeType":"263","messageId":"264","endLine":13,"endColumn":10},{"ruleId":"261","severity":1,"message":"275","line":28,"column":7,"nodeType":"263","messageId":"264","endLine":28,"endColumn":14},{"ruleId":"261","severity":1,"message":"308","line":31,"column":10,"nodeType":"263","messageId":"264","endLine":31,"endColumn":19},{"ruleId":"261","severity":1,"message":"309","line":32,"column":10,"nodeType":"263","messageId":"264","endLine":32,"endColumn":22},{"ruleId":"261","severity":1,"message":"310","line":33,"column":24,"nodeType":"263","messageId":"264","endLine":33,"endColumn":39},{"ruleId":"261","severity":1,"message":"262","line":34,"column":10,"nodeType":"263","messageId":"264","endLine":34,"endColumn":14},{"ruleId":"261","severity":1,"message":"311","line":36,"column":9,"nodeType":"263","messageId":"264","endLine":36,"endColumn":17},{"ruleId":"261","severity":1,"message":"312","line":55,"column":9,"nodeType":"263","messageId":"264","endLine":55,"endColumn":20},{"ruleId":"261","severity":1,"message":"313","line":70,"column":9,"nodeType":"263","messageId":"264","endLine":70,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.","ArrayExpression",["314"],"no-native-reassign",["315"],"no-negated-in-lhs",["316"],["315"],["316"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["315"],["316"],"Assign object to a variable before exporting as module default",["315"],["316"],["315"],["316"],"React Hook useEffect has missing dependencies: 'eduForm' and 'infoForm'. Either include them or remove the dependency array.",["317"],"React Hook useEffect has a missing dependency: 'getBooks'. Either include it or remove the dependency array.",["318"],"no-unused-vars","'form' is assigned a value but never used.","Identifier","unusedVar","'confirm' is defined but never used.","React Hook useEffect has a missing dependency: 'getExampaper'. Either include it or remove the dependency array.",["319"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'BASEURL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchContacts'. Either include it or remove the dependency array.",["320"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'Badge' is defined but never used.",["315"],["316"],"React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["321"],"React Hook useEffect has a missing dependency: 'handleMessages'. Either include it or remove the dependency array.",["322"],["315"],["316"],"React Hook useEffect has a missing dependency: 'getNotes'. Either include it or remove the dependency array.",["323"],"React Hook useEffect has missing dependencies: 'form' and 'props.location.state'. Either include them or remove the dependency array.",["324"],"React Hook useEffect has a missing dependency: 'getAllBooks'. Either include it or remove the dependency array.",["325"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","'Modal' is defined but never used.","'Select' is defined but never used.","'Tooltip' is defined but never used.","'notesData' is assigned a value but never used.","'visibleModal' is assigned a value but never used.","'setSelectedFile' is assigned a value but never used.","'onFinish' is assigned a value but never used.","'getAllNotes' is assigned a value but never used.","'handleQuery' is assigned a value but never used.",{"desc":"326","fix":"327"},"no-global-assign","no-unsafe-negation",{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},"Update the dependencies array to be: [getUser]",{"range":"346","text":"347"},"Update the dependencies array to be: [eduForm, infoForm, userData]",{"range":"348","text":"349"},"Update the dependencies array to be: [getBooks, userData.iduser]",{"range":"350","text":"351"},"Update the dependencies array to be: [getExampaper, userData.iduser]",{"range":"352","text":"353"},"Update the dependencies array to be: [fetchContacts, userData.iduser]",{"range":"354","text":"355"},"Update the dependencies array to be: [friendDetails.roomId, getMessages]",{"range":"356","text":"357"},"Update the dependencies array to be: [handleMessages, socket]",{"range":"358","text":"359"},"Update the dependencies array to be: [getNotes, userData.iduser]",{"range":"360","text":"361"},"Update the dependencies array to be: [form, props.location.state]",{"range":"362","text":"363"},"Update the dependencies array to be: [getAllBooks, userData.iduser]",{"range":"364","text":"365"},[1256,1258],"[getUser]",[5381,5391],"[eduForm, infoForm, userData]",[1099,1116],"[getBooks, userData.iduser]",[1416,1433],"[getExampaper, userData.iduser]",[1802,1819],"[fetchContacts, userData.iduser]",[1303,1325],"[friendDetails.roomId, getMessages]",[1968,1976],"[handleMessages, socket]",[1296,1313],"[getNotes, userData.iduser]",[3366,3368],"[form, props.location.state]",[2656,2673],"[getAllBooks, userData.iduser]"]