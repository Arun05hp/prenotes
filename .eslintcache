[{"F:\\reactjs\\prenotes\\src\\App.js":"1","F:\\reactjs\\prenotes\\src\\Navigation\\Navigation.js":"2","F:\\reactjs\\prenotes\\src\\components\\Exam\\Upload\\ExamUpload.jsx":"3","F:\\reactjs\\prenotes\\src\\context\\createDataContext.js":"4","F:\\reactjs\\prenotes\\src\\services\\httpService.js":"5","F:\\reactjs\\prenotes\\src\\components\\Notification\\Notification.jsx":"6","F:\\reactjs\\prenotes\\src\\components\\Profile\\Profile.jsx":"7","F:\\reactjs\\prenotes\\src\\components\\Home\\UserSlider.jsx":"8","F:\\reactjs\\prenotes\\src\\components\\Profile\\PersonalInfo.jsx":"9","F:\\reactjs\\prenotes\\src\\components\\Auth\\Signin.jsx":"10","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Books\\Books.jsx":"11","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Exampaper\\Exampaper.jsx":"12","F:\\reactjs\\prenotes\\src\\components\\Notes\\Upload\\NotesUpload.jsx":"13","F:\\reactjs\\prenotes\\src\\components\\Profile\\ChangePassword\\ChangePassword.jsx":"14","F:\\reactjs\\prenotes\\src\\components\\Messanger\\Messanger.jsx":"15","F:\\reactjs\\prenotes\\src\\context\\BooksContext.js":"16","F:\\reactjs\\prenotes\\src\\components\\Exam\\Search\\ExamSearch.jsx":"17","F:\\reactjs\\prenotes\\src\\components\\Home\\Home.jsx":"18","F:\\reactjs\\prenotes\\src\\components\\Navbar\\MenuItems.jsx":"19","F:\\reactjs\\prenotes\\src\\context\\SocketProvider.js":"20","F:\\reactjs\\prenotes\\src\\components\\Messanger\\ChatContainer.jsx":"21","F:\\reactjs\\prenotes\\src\\components\\Messanger\\ChatContacts.jsx":"22","F:\\reactjs\\prenotes\\src\\index.js":"23","F:\\reactjs\\prenotes\\src\\context\\AuthContext.js":"24","F:\\reactjs\\prenotes\\src\\helper\\SecureStorage.js":"25","F:\\reactjs\\prenotes\\src\\components\\Books\\Sell\\SellBook.jsx":"26","F:\\reactjs\\prenotes\\src\\components\\Home\\Feedback.jsx":"27","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Notes\\Notes.jsx":"28","F:\\reactjs\\prenotes\\src\\components\\Notes\\Search\\NotesSearch.jsx":"29","F:\\reactjs\\prenotes\\src\\components\\Navbar\\Navbar.jsx":"30","F:\\reactjs\\prenotes\\src\\components\\Books\\Buy\\BuyBook.jsx":"31","F:\\reactjs\\prenotes\\src\\components\\Auth\\Signup.jsx":"32","F:\\reactjs\\prenotes\\src\\components\\Footer\\Footer.jsx":"33","F:\\reactjs\\prenotes\\src\\context\\NotesContext.js":"34","F:\\reactjs\\prenotes\\src\\context\\ConversationsProvider.js":"35","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\MyUpload.jsx":"36","F:\\reactjs\\prenotes\\src\\helper\\useSessionStorage.js":"37","F:\\reactjs\\prenotes\\src\\components\\Tuition\\Reg\\Reg.jsx":"38","F:\\reactjs\\prenotes\\src\\components\\Tuition\\Find\\View.jsx":"39","F:\\reactjs\\prenotes\\src\\components\\Profile\\Tutor\\Tutor.jsx":"40","F:\\reactjs\\prenotes\\src\\components\\Errors\\NotFound.jsx":"41","F:\\reactjs\\prenotes\\src\\components\\protectedRoute.jsx":"42"},{"size":957,"mtime":1609341324525,"results":"43","hashOfConfig":"44"},{"size":3396,"mtime":1609568189845,"results":"45","hashOfConfig":"44"},{"size":7796,"mtime":1609350259063,"results":"46","hashOfConfig":"44"},{"size":547,"mtime":1607870751521,"results":"47","hashOfConfig":"44"},{"size":563,"mtime":1609341957171,"results":"48","hashOfConfig":"44"},{"size":7575,"mtime":1609387067776,"results":"49","hashOfConfig":"44"},{"size":3643,"mtime":1609327153619,"results":"50","hashOfConfig":"44"},{"size":11186,"mtime":1609414642742,"results":"51","hashOfConfig":"44"},{"size":19758,"mtime":1609349634001,"results":"52","hashOfConfig":"44"},{"size":2308,"mtime":1609344351413,"results":"53","hashOfConfig":"44"},{"size":3493,"mtime":1609333895112,"results":"54","hashOfConfig":"44"},{"size":5548,"mtime":1609334433608,"results":"55","hashOfConfig":"44"},{"size":4210,"mtime":1609350164820,"results":"56","hashOfConfig":"44"},{"size":2011,"mtime":1608864968077,"results":"57","hashOfConfig":"44"},{"size":2969,"mtime":1609390015156,"results":"58","hashOfConfig":"44"},{"size":958,"mtime":1609333520329,"results":"59","hashOfConfig":"44"},{"size":8216,"mtime":1609683618086,"results":"60","hashOfConfig":"44"},{"size":4836,"mtime":1609401248940,"results":"61","hashOfConfig":"44"},{"size":3098,"mtime":1609555229158,"results":"62","hashOfConfig":"44"},{"size":624,"mtime":1609003053102,"results":"63","hashOfConfig":"44"},{"size":6728,"mtime":1609398267709,"results":"64","hashOfConfig":"44"},{"size":1618,"mtime":1609390075392,"results":"65","hashOfConfig":"44"},{"size":219,"mtime":1607270798331,"results":"66","hashOfConfig":"44"},{"size":2179,"mtime":1609349455929,"results":"67","hashOfConfig":"44"},{"size":1001,"mtime":1609316035328,"results":"68","hashOfConfig":"44"},{"size":5107,"mtime":1609350020213,"results":"69","hashOfConfig":"44"},{"size":2643,"mtime":1608223650918,"results":"70","hashOfConfig":"44"},{"size":3413,"mtime":1609333970388,"results":"71","hashOfConfig":"44"},{"size":9962,"mtime":1609415247303,"results":"72","hashOfConfig":"44"},{"size":5102,"mtime":1609555541663,"results":"73","hashOfConfig":"44"},{"size":7342,"mtime":1609336022376,"results":"74","hashOfConfig":"44"},{"size":15524,"mtime":1609473762592,"results":"75","hashOfConfig":"44"},{"size":268,"mtime":1609332212930,"results":"76","hashOfConfig":"44"},{"size":1484,"mtime":1609332960389,"results":"77","hashOfConfig":"44"},{"size":3166,"mtime":1609003836063,"results":"78","hashOfConfig":"44"},{"size":657,"mtime":1608811101478,"results":"79","hashOfConfig":"44"},{"size":628,"mtime":1609038541280,"results":"80","hashOfConfig":"44"},{"size":5494,"mtime":1609299561345,"results":"81","hashOfConfig":"44"},{"size":6298,"mtime":1609410047359,"results":"82","hashOfConfig":"44"},{"size":4152,"mtime":1609309232008,"results":"83","hashOfConfig":"44"},{"size":258,"mtime":1609336474226,"results":"84","hashOfConfig":"44"},{"size":695,"mtime":1609557771569,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},"zyjns1",{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"89"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"89"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"89"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"89"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"106"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"89"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"101"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"F:\\reactjs\\prenotes\\src\\App.js",["194"],"import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider as AuthProvider } from \"./context/AuthContext\";\nimport { Provider as NotesProvider } from \"./context/NotesContext\";\nimport { Provider as BooksProvider } from \"./context/BooksContext\";\nimport Navigation from \"./Navigation/Navigation\";\nimport Signup from \"./components/Auth/Signup\";\nimport \"./App.css\";\nimport NotFound from \"./components/Errors/NotFound\";\n\nconst App = () => {\n  return (\n    <BooksProvider>\n      <NotesProvider>\n        <AuthProvider>\n          <div className=\"app\">\n            <Router>\n              <Switch>\n                <Route exact path=\"/signup\" exact component={Signup} />\n                <Navigation />\n                <Route component={NotFound} />\n              </Switch>\n            </Router>\n          </div>\n        </AuthProvider>\n      </NotesProvider>\n    </BooksProvider>\n  );\n};\n\nexport default App;\n",["195","196"],"F:\\reactjs\\prenotes\\src\\Navigation\\Navigation.js",["197","198","199","200","201","202"],"F:\\reactjs\\prenotes\\src\\components\\Exam\\Upload\\ExamUpload.jsx",[],["203","204"],"F:\\reactjs\\prenotes\\src\\context\\createDataContext.js",["205"],"import React, { useReducer } from \"react\";\r\n\r\nexport default (reducer, actions, defaultValue) => {\r\n  const Context = React.createContext();\r\n\r\n  const Provider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, defaultValue);\r\n    const boundActions = {};\r\n\r\n    for (let key in actions) {\r\n      boundActions[key] = actions[key](dispatch);\r\n    }\r\n\r\n    return (\r\n      <Context.Provider value={{ state, ...boundActions }}>\r\n        {children}\r\n      </Context.Provider>\r\n    );\r\n  };\r\n  return { Context, Provider };\r\n};\r\n","F:\\reactjs\\prenotes\\src\\services\\httpService.js",["206"],"import axios from \"axios\";\r\nimport SecureStorage from \"../helper/SecureStorage\";\r\nconst BASE = process.env.REACT_APP_BASE_URL;\r\n\r\naxios.defaults.baseURL = BASE;\r\n\r\naxios.interceptors.request.use(\r\n  async (config) => {\r\n    const data = await SecureStorage.getItem(\"userData\");\r\n\r\n    if (data) {\r\n      config.headers.Authorization = `PreNotes__20 ${data.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (err) => {\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n};\r\n",["207","208"],"F:\\reactjs\\prenotes\\src\\components\\Notification\\Notification.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Profile\\Profile.jsx",[],["209","210"],"F:\\reactjs\\prenotes\\src\\components\\Home\\UserSlider.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Profile\\PersonalInfo.jsx",["211"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Col,\r\n  DatePicker,\r\n  Form,\r\n  Input,\r\n  Radio,\r\n  Row,\r\n  message,\r\n  Modal,\r\n  Select,\r\n  Upload,\r\n} from \"antd\";\r\nimport { Context as AuthContext } from \"../../context/AuthContext\";\r\nimport http from \"../../services/httpService\";\r\nimport {\r\n  UserOutlined,\r\n  LoadingOutlined,\r\n  PlusOutlined,\r\n  EditOutlined,\r\n} from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nconst layout = {\r\n  labelCol: { span: 24 },\r\n  wrapperCol: { span: 24 },\r\n};\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nconst dateFormat = \"DD/MM/YYYY\";\r\n\r\nfunction getBase64(img, callback) {\r\n  const reader = new FileReader();\r\n  reader.addEventListener(\"load\", () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n}\r\n\r\nfunction beforeUpload(file) {\r\n  const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\r\n  if (!isJpgOrPng) {\r\n    message.error(\"You can only upload JPG/PNG file!\");\r\n  }\r\n  const isLt2M = file.size / 1024 / 1024 < 2;\r\n  if (!isLt2M) {\r\n    message.error(\"Image must smaller than 2MB!\");\r\n  }\r\n  return isJpgOrPng && isLt2M;\r\n}\r\n\r\nconst PersonalInfo = () => {\r\n  const { state, getUserDetails } = useContext(AuthContext);\r\n  const { userData, token } = state;\r\n  const [visibleInfo, setVisibleInfo] = useState(false);\r\n  const [visibleEdu, setVisibleEdu] = useState(false);\r\n  const [visiblePic, setVisiblePic] = useState(false);\r\n  const [imageData, setImageData] = useState({\r\n    loading: false,\r\n    imgUrl: null,\r\n  });\r\n  const [disabledAddr, setDisabledAddr] = useState(0);\r\n  const BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const actionUrl = BASEURL + \"user/profile/\" + userData.iduser;\r\n\r\n  const [infoForm] = Form.useForm();\r\n  const [eduForm] = Form.useForm();\r\n  const [basicForm] = Form.useForm();\r\n  const [edForm] = Form.useForm();\r\n\r\n  const handleCancel = () => {\r\n    setVisibleInfo(false);\r\n    setVisibleEdu(false);\r\n  };\r\n\r\n  const handleIsHosteler = (e) => {\r\n    setDisabledAddr(e.target.value);\r\n  };\r\n\r\n  const handleBasicInfo = () => {\r\n    basicForm.setFieldsValue({\r\n      name: userData.name,\r\n      dob: moment(userData.dob),\r\n      mno: userData.mno,\r\n      gender: userData.gender,\r\n      email: userData.email,\r\n    });\r\n    setVisibleInfo(true);\r\n  };\r\n  const handleEdu = () => {\r\n    edForm.setFieldsValue({\r\n      institute: userData.institute,\r\n      branch: userData.branch,\r\n      sem: userData.sem,\r\n      batch: [moment(userData.batchStart), moment(userData.batchEnd)],\r\n      regno: userData.regno,\r\n      hosteler: userData.hosteler,\r\n      hostelAddress: userData.hosteler ? userData.hostelAddress : \" \",\r\n    });\r\n\r\n    setVisibleEdu(true);\r\n  };\r\n\r\n  const submitBasicInfo = (values) => {\r\n    console.log(\"Success:\", values);\r\n\r\n    http\r\n      .put(\"user/updateprofile/\" + userData.iduser, values)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        getUserDetails(res.userId);\r\n        basicForm.resetFields();\r\n        setVisibleInfo(false);\r\n        message.success(\"Profile Updated Successfully\", 3);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const submitEdu = (values) => {\r\n    console.log(\"Success:\", values);\r\n    let data = {\r\n      ...values,\r\n\r\n      batchStart: values.batch[0],\r\n      batchEnd: values.batch[1],\r\n      hostelAddress: values.hosteler ? values.hostelAddress : null,\r\n    };\r\n    delete data.batch;\r\n    http\r\n      .put(\"user/updateEdu/\" + userData.iduser, data)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        getUserDetails(res.userId);\r\n        edForm.resetFields();\r\n        setVisibleEdu(false);\r\n        message.success(\"Education Updated Successfully\", 3);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleChange = (info) => {\r\n    setImageData({ loading: true, imgUrl: null });\r\n    if (info.file.status === \"done\") {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, (imageUrl) =>\r\n        setImageData({ loading: false, imgUrl: imageUrl })\r\n      );\r\n      getUserDetails(userData.iduser);\r\n      message.success(\"Profile Image Updated Successfully\", 3);\r\n      setVisiblePic(false);\r\n    }\r\n    if (info.file.status === \"error\") {\r\n      message.error(\"Failed\", 3);\r\n    }\r\n  };\r\n\r\n  const uploadButton = (\r\n    <div>\r\n      {imageData.loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n      <div style={{ marginTop: 8 }}>Upload</div>\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (userData) {\r\n      infoForm.setFieldsValue({\r\n        name: userData.name,\r\n        dob: moment(userData.dob).format(dateFormat),\r\n        mno: Number(userData.mno),\r\n        gender: userData.gender,\r\n        email: userData.email,\r\n      });\r\n      setDisabledAddr(userData.hosteler);\r\n      eduForm.setFieldsValue({\r\n        institute: userData.institute,\r\n        branch: userData.branch,\r\n        sem: Number(userData.sem),\r\n        batch: `${moment(userData.batchStart).format(\"YYYY\")} - ${moment(\r\n          userData.batchEnd\r\n        ).format(\"YYYY\")}`,\r\n        regno: userData.regno,\r\n        hosteler: userData.hosteler ? \"Yes\" : \"No\",\r\n        hostelAddress: userData.hosteler ? userData.hostelAddress : \" \",\r\n      });\r\n    }\r\n  }, [userData]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"innerWrapper\">\r\n        <div className=\"avatar_wrapper\">\r\n          <Avatar\r\n            size={{ xs: 64, sm: 64, md: 64, lg: 64, xl: 100, xxl: 100 }}\r\n            src={\r\n              userData.profileImg != null ? BASEURL + userData.profileImg : null\r\n            }\r\n            icon={<UserOutlined />}\r\n            key={userData.profileImg}\r\n          />\r\n          <Button className=\"btn\" onClick={() => setVisiblePic(true)}>\r\n            Change Photo\r\n          </Button>\r\n        </div>\r\n        <div className=\"heading_wrap\">\r\n          <h3>Basic Information</h3>\r\n          <div className=\"circle\" onClick={handleBasicInfo}>\r\n            <EditOutlined />\r\n          </div>\r\n        </div>\r\n\r\n        <Form form={infoForm} {...layout} layout=\"vertical\">\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Name\" name=\"name\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"DOB\" name=\"dob\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Mobile Number\" name=\"mno\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Gender\" name=\"gender\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Email\" name=\"email\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n\r\n        <div className=\"heading_wrap\">\r\n          <h3>Education</h3>\r\n          <div className=\"circle\" onClick={handleEdu}>\r\n            <EditOutlined />\r\n          </div>\r\n        </div>\r\n        <Form form={eduForm} {...layout} layout=\"vertical\">\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Institution\" name=\"institute\">\r\n                <Select size=\"large\" disabled>\r\n                  <Option value={1}>\r\n                    Sant Longowal Institute of Engineering and Technology\r\n                  </Option>\r\n                  <Option value={2}>Panjab University</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Branch\" name=\"branch\">\r\n                <Select size=\"large\" disabled>\r\n                  <Option value={1}>Mechanical Engineering</Option>\r\n                  <Option value={2}>Computer Science Engineering</Option>\r\n                  <Option value={3}>Electrical Engineering</Option>\r\n                  <Option value={4}>Civil Engineering</Option>\r\n                  <Option value={5}>Instrumentation Engineering</Option>\r\n                  <Option value={6}>Chemical Engineering</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Semester\" name=\"sem\">\r\n                <Select size=\"large\" disabled>\r\n                  <Option value={1}>1</Option>\r\n                  <Option value={2}>2</Option>\r\n                  <Option value={3}>3</Option>\r\n                  <Option value={4}>4</Option>\r\n                  <Option value={5}>5</Option>\r\n                  <Option value={6}>6</Option>\r\n                  <Option value={7}>7</Option>\r\n                  <Option value={8}>8</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label={\"Batch\"} name=\"batch\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={12} xs={24}>\r\n              <Form.Item label=\"Registration No.\" name=\"regno\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item name=\"hosteler\" label=\"Hosteler\">\r\n                <Input size=\"large\" disabled />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n\r\n      <Modal\r\n        visible={visibleInfo}\r\n        title=\"Basic Information\"\r\n        onCancel={handleCancel}\r\n        width={800}\r\n        footer={[\r\n          <Button key=\"submit\" type=\"primary\" onClick={basicForm.submit}>\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          form={basicForm}\r\n          {...layout}\r\n          layout=\"vertical\"\r\n          initialValues={{ remember: true }}\r\n          name=\"basic\"\r\n          onFinish={submitBasicInfo}\r\n        >\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Name\"\r\n                name=\"name\"\r\n                rules={[{ required: true, message: \"Please input your name!\" }]}\r\n              >\r\n                <Input autoComplete=\"off\" size=\"large\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"DOB\"\r\n                name=\"dob\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <DatePicker\r\n                  allowClear={false}\r\n                  style={{ width: \"100%\" }}\r\n                  format={dateFormat}\r\n                  size=\"large\"\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Mobile Number\"\r\n                name=\"mno\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your mobile number!\",\r\n                  },\r\n                  {\r\n                    minLength: 10,\r\n                    maxLength: 10,\r\n                    pattern: \"^[0-9]{10}$\",\r\n                    message: \"Must be 10 digits\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input type=\"tel\" size=\"large\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Gender\"\r\n                name=\"gender\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <Radio.Group\r\n                  optionType=\"button\"\r\n                  buttonStyle=\"solid\"\r\n                  size=\"large\"\r\n                >\r\n                  <Radio.Button value=\"Male\">Male</Radio.Button>\r\n                  <Radio.Button value=\"Female\">Female</Radio.Button>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Email\"\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input your username!\",\r\n                  },\r\n                  { type: \"email\", message: \"Please input valid email!\" },\r\n                ]}\r\n              >\r\n                <Input autoComplete=\"off\" size=\"large\" />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n      <Modal\r\n        visible={visibleEdu}\r\n        title=\"Education\"\r\n        onCancel={handleCancel}\r\n        width={800}\r\n        footer={[\r\n          <Button key=\"submit\" type=\"primary\" onClick={edForm.submit}>\r\n            Update\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          form={edForm}\r\n          {...layout}\r\n          layout=\"vertical\"\r\n          initialValues={{ remember: true }}\r\n          name=\"basic\"\r\n          onFinish={submitEdu}\r\n        >\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Institution\"\r\n                name=\"institute\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <Select\r\n                  showSearch\r\n                  size=\"large\"\r\n                  placeholder=\"Select College\"\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.children\r\n                      .toLowerCase()\r\n                      .localeCompare(optionB.children.toLowerCase())\r\n                  }\r\n                >\r\n                  <Option value={1}>\r\n                    Sant Longowal Institute of Engineering and Technology\r\n                  </Option>\r\n                  <Option value={2}>Panjab University</Option>\r\n                  {/* <Option value={3}>Communicated</Option>\r\n                      <Option value={4}>Identified</Option> */}\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Branch\"\r\n                name=\"branch\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <Select\r\n                  showSearch\r\n                  size=\"large\"\r\n                  placeholder=\"Select Branch\"\r\n                  optionFilterProp=\"children\"\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.children\r\n                      .toLowerCase()\r\n                      .localeCompare(optionB.children.toLowerCase())\r\n                  }\r\n                >\r\n                  <Option value={1}>Mechanical Engineering</Option>\r\n                  <Option value={2}>Computer Science Engineering</Option>\r\n                  <Option value={3}>Electrical Engineering</Option>\r\n                  <Option value={4}>Civil Engineering</Option>\r\n                  <Option value={5}>Instrumentation Engineering</Option>\r\n                  <Option value={6}>Chemical Engineering</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Semester\"\r\n                name=\"sem\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Required!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select size=\"large\">\r\n                  <Option value={1}>1</Option>\r\n                  <Option value={2}>2</Option>\r\n                  <Option value={3}>3</Option>\r\n                  <Option value={4}>4</Option>\r\n                  <Option value={5}>5</Option>\r\n                  <Option value={6}>6</Option>\r\n                  <Option value={7}>7</Option>\r\n                  <Option value={8}>8</Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label={\"Batch\"}\r\n                name=\"batch\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <RangePicker\r\n                  style={{ width: \"100%\" }}\r\n                  picker=\"year\"\r\n                  size=\"large\"\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={16}>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                label=\"Registration No.\"\r\n                name=\"regno\"\r\n                rules={[{ required: true, message: \"Required!\" }]}\r\n              >\r\n                <Input autoComplete=\"off\" size=\"large\" />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                name=\"hosteler\"\r\n                label=\"Hosteler\"\r\n                rules={[{ required: true, message: \"Please pick an item!\" }]}\r\n              >\r\n                <Radio.Group\r\n                  optionType=\"button\"\r\n                  buttonStyle=\"solid\"\r\n                  size=\"large\"\r\n                  onChange={handleIsHosteler}\r\n                >\r\n                  <Radio.Button value={1}>Yes</Radio.Button>\r\n                  <Radio.Button value={0}>No</Radio.Button>\r\n                </Radio.Group>\r\n              </Form.Item>\r\n            </Col>\r\n\r\n            <Col md={12} xs={24}>\r\n              <Form.Item\r\n                name=\"hostelAddress\"\r\n                label=\"Hostel Address\"\r\n                rules={[{ required: disabledAddr, message: \"Required!\" }]}\r\n              >\r\n                <Input.TextArea\r\n                  maxLength={250}\r\n                  rows={2}\r\n                  disabled={!disabledAddr}\r\n                />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Modal>\r\n\r\n      <Modal\r\n        visible={visiblePic}\r\n        title=\"Change Profile Image\"\r\n        onCancel={() => setVisiblePic(false)}\r\n        footer={null}\r\n        style={{ textAlign: \"center\", maxWidth: \"300px\" }}\r\n      >\r\n        <Upload\r\n          name=\"photo\"\r\n          listType=\"picture-card\"\r\n          className=\"avatar-uploader\"\r\n          showUploadList={false}\r\n          action={actionUrl}\r\n          headers={{ Authorization: `PreNotes__20 ${token}` }}\r\n          beforeUpload={beforeUpload}\r\n          onChange={handleChange}\r\n        >\r\n          {imageData.imgUrl ? (\r\n            <img\r\n              src={imageData.imgUrl}\r\n              alt=\"avatar\"\r\n              style={{ width: \"100%\" }}\r\n            />\r\n          ) : (\r\n            uploadButton\r\n          )}\r\n        </Upload>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonalInfo;\r\n",["212","213"],"F:\\reactjs\\prenotes\\src\\components\\Auth\\Signin.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Books\\Books.jsx",["214"],"import { DeleteOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Image,\r\n  Popconfirm,\r\n  Row,\r\n  message,\r\n  Skeleton,\r\n} from \"antd\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport { Context as AuthContext } from \"../../../../context/AuthContext\";\r\nimport { Context as BookContext } from \"../../../../context/BooksContext\";\r\nimport http from \"../../../../services/httpService\";\r\nconst Books = () => {\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const {\r\n    state: { userData },\r\n  } = useContext(AuthContext);\r\n\r\n  const {\r\n    state: { booksData, isLoading },\r\n    getBooks,\r\n  } = useContext(BookContext);\r\n\r\n  const deleteBook = (id) => {\r\n    http\r\n      .delete(\"upload/delbook/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Deleted Successfully\", 3);\r\n        getBooks(userData.iduser);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getBooks(userData.iduser);\r\n    else return;\r\n  }, [userData.iduser]);\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={[16, 16]}>\r\n        {isLoading ? (\r\n          <Col md={12} xs={24}>\r\n            <Card className=\"itemWrapper\">\r\n              <Row gutter={8}>\r\n                <Col md={6} xs={6}>\r\n                  <Skeleton.Image active />\r\n                </Col>\r\n                <Col md={18} xs={18}>\r\n                  <div style={{ padding: \"0 10px\" }}>\r\n                    <Skeleton active paragraph={true} />\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n          </Col>\r\n        ) : booksData.length > 0 ? (\r\n          booksData.map((item) => {\r\n            return (\r\n              <Col md={12} xs={24}>\r\n                <Card className=\"itemWrapper\">\r\n                  <Row gutter={8}>\r\n                    <Col md={6} xs={6}>\r\n                      <Avatar\r\n                        shape=\"square\"\r\n                        src={<Image src={BASEURL + item.fileLink} />}\r\n                      />\r\n                    </Col>\r\n                    <Col md={14} xs={18}>\r\n                      <h3>{item.bookName}</h3>\r\n                      <p>\r\n                        {item.authorName} by {item.publisherName}\r\n                      </p>\r\n                      <h3>Rs {item.price}</h3>\r\n                    </Col>\r\n                    <Col md={4} xs={24}>\r\n                      <div className=\"btnWrapper\">\r\n                        <Popconfirm\r\n                          placement=\"topRight\"\r\n                          title=\"\r\n                Are you sure you want to delete?\"\r\n                          onConfirm={() => deleteBook(item.idbook)}\r\n                          okText=\"Yes\"\r\n                          cancelText=\"No\"\r\n                        >\r\n                          <Button\r\n                            danger\r\n                            type=\"link\"\r\n                            shape=\"circle\"\r\n                            icon={<DeleteOutlined />}\r\n                          />\r\n                        </Popconfirm>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </Card>\r\n              </Col>\r\n            );\r\n          })\r\n        ) : (\r\n          <Col md={12} sm={12}>\r\n            <Card>No Records</Card>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Books;\r\n","F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Exampaper\\Exampaper.jsx",["215","216","217","218","219","220"],"import { UploadOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Form,\r\n  message,\r\n  Modal,\r\n  Row,\r\n  Upload,\r\n  Skeleton,\r\n} from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Context as AuthContext } from \"../../../../context/AuthContext\";\r\nimport { Context as NotesContext } from \"../../../../context/NotesContext\";\r\nimport http from \"../../../../services/httpService\";\r\nimport \"./exampaper.css\";\r\nfunction getBranch(id) {\r\n  switch (id) {\r\n    case 1:\r\n      return \"Mechanical Engg.\";\r\n    case 2:\r\n      return \"Computer Sci. Engg.\";\r\n    case 3:\r\n      return \"Electrical Engg.\";\r\n    case 4:\r\n      return \"Civil Engg.\";\r\n    case 5:\r\n      return \"Instrumentation Engg.\";\r\n    case 6:\r\n      return \"Chemical Engg.\";\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst Exampaper = () => {\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const {\r\n    state: { userData },\r\n  } = useContext(AuthContext);\r\n\r\n  const {\r\n    state: { examData, isLoading },\r\n    getExampaper,\r\n  } = useContext(NotesContext);\r\n\r\n  const [form] = Form.useForm();\r\n  const [visibleModal, setVisibleModal] = useState(false);\r\n  const [examId, setExamId] = useState(-1);\r\n  const [fileList, setFileList] = useState([]);\r\n\r\n  function confirm() {\r\n    console.log(\"Clicked on Yes.\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getExampaper(userData.iduser);\r\n    else return;\r\n  }, [userData.iduser]);\r\n\r\n  const handleUpload = (id) => {\r\n    setExamId(id);\r\n    setVisibleModal(true);\r\n  };\r\n\r\n  const uploadSol = () => {\r\n    const formData = new FormData();\r\n    fileList.forEach((file) => {\r\n      formData.append(\"file\", file);\r\n    });\r\n    http\r\n      .post(\"exam/uploadsolution/\" + examId, formData)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setFileList([]);\r\n        setVisibleModal(false);\r\n        message.success(\" Uploaded Successfully\", 3);\r\n        getExampaper(userData.iduser);\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n  function beforeUpload(file) {\r\n    if (\r\n      file.type === \"application/pdf\" ||\r\n      file.type === \"image/jpeg\" ||\r\n      file.type === \"image/png\"\r\n    ) {\r\n      setFileList([file]);\r\n    } else {\r\n      message.error(\"Only pdf, jpeg, png\");\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function onRemove(file) {\r\n    setFileList([]);\r\n  }\r\n  return (\r\n    <div>\r\n      <Row gutter={[16, 16]}>\r\n        {isLoading ? (\r\n          <Col md={12} xs={24}>\r\n            <div className=\"innerWrapper\">\r\n              <Card className=\"itemWrapper\">\r\n                <Skeleton active />\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n        ) : examData.length > 0 ? (\r\n          examData.map((item) => {\r\n            return (\r\n              <Col key={item.idnotes} md={12} xs={24}>\r\n                <div className=\"innerWrapper exam\">\r\n                  <Card className=\"itemWrapper\">\r\n                    <Row gutter={8}>\r\n                      <Col md={24} xs={24}>\r\n                        <h3>{item.subject}</h3>\r\n                        <p>{getBranch(item.branch)}</p>\r\n                      </Col>\r\n                      <Col md={12} sm={12} xs={24}>\r\n                        <div className=\"btn_wrapper\">\r\n                          <a href={BASEURL + item.quefileLink} target=\"_blank\">\r\n                            <Button> View Exam Paper</Button>\r\n                          </a>\r\n                        </div>\r\n                      </Col>\r\n                      <Col md={12} sm={12} xs={24}>\r\n                        <div className=\"btn_wrapper\">\r\n                          {item.solfileLink != null &&\r\n                          item.solfileLink != \"\" ? (\r\n                            <a\r\n                              href={BASEURL + item.solfileLink}\r\n                              target=\"_blank\"\r\n                            >\r\n                              <Button> View Soultion</Button>\r\n                            </a>\r\n                          ) : (\r\n                            <Button onClick={() => handleUpload(item.idexam)}>\r\n                              Upload Soultion\r\n                            </Button>\r\n                          )}\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card>\r\n                </div>\r\n              </Col>\r\n            );\r\n          })\r\n        ) : (\r\n          <Col md={12} xs={24}>\r\n            <Card>No Records</Card>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n      <Modal\r\n        visible={visibleModal}\r\n        title=\"Upload Solution\"\r\n        onCancel={() => setVisibleModal(false)}\r\n        footer={[\r\n          <Button className=\"btn-primary\" onClick={uploadSol}>\r\n            Upload\r\n          </Button>,\r\n        ]}\r\n        style={{ textAlign: \"center\", maxWidth: \"300px\" }}\r\n      >\r\n        <Dragger\r\n          name=\"file\"\r\n          multiple={false}\r\n          fileList={fileList}\r\n          beforeUpload={beforeUpload}\r\n          onRemove={onRemove}\r\n        >\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <UploadOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">Click or Drag file here</p>\r\n        </Dragger>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Exampaper;\r\n","F:\\reactjs\\prenotes\\src\\components\\Notes\\Upload\\NotesUpload.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Profile\\ChangePassword\\ChangePassword.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Messanger\\Messanger.jsx",["221"],"import { Col, Row, message } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Context as AuthContext } from \"../../context/AuthContext\";\r\nimport { SocketProvider } from \"../../context/SocketProvider.js\";\r\nimport ChatContacts from \"./ChatContacts.jsx\";\r\nimport ChatContainer from \"./ChatContainer.jsx\";\r\nimport http from \"../../services/httpService\";\r\nimport useSessionStorage from \"../../helper/useSessionStorage\";\r\nimport mailImg from \"../../assets/images/mail.png\";\r\nimport \"./messanger.css\";\r\n\r\nconst Messanger = () => {\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [id, setId] = useState(-1);\r\n  const [contactLists, setContactsList] = useSessionStorage(\"contacts\", []);\r\n  const [conLoading, setConLoading] = useState(false);\r\n  const [friendDetails, setFriendDetails] = useState({\r\n    id: null,\r\n    userDetails: { name: null, profileImg: null },\r\n    roomId: null,\r\n  });\r\n\r\n  const fetchContacts = (id) => {\r\n    setConLoading(true);\r\n    http\r\n      .get(\"contacts/contacts/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        if (res.contactsData.length > 0) {\r\n          setId(res.contactsData[0].uuid);\r\n          if (res.contactsData[0].contacts) {\r\n            setContactsList(res.contactsData[0].contacts);\r\n          }\r\n        }\r\n        setTimeout(() => {\r\n          setConLoading(false);\r\n        }, 3000);\r\n      })\r\n      .catch((err) => {\r\n        setConLoading(false);\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) fetchContacts(userData.iduser);\r\n    console.log(\"m id\", userData.iduser);\r\n  }, [userData.iduser]);\r\n\r\n  return (\r\n    <SocketProvider id={id}>\r\n      <div className=\"msg_wrapper\">\r\n        <Row gutter={[16, 16]}>\r\n          <Col md={6} xs={24}>\r\n            <ChatContacts\r\n              contactLists={contactLists}\r\n              setFriendDetails={setFriendDetails}\r\n              conLoading={conLoading}\r\n              selectedRoom={friendDetails.roomId}\r\n            />\r\n          </Col>\r\n          <Col md={18} xs={24}>\r\n            {friendDetails.id ? (\r\n              <ChatContainer id={id} friendDetails={friendDetails} />\r\n            ) : (\r\n              <div className=\"nomessages\">\r\n                <div className=\"nomsg_body\">\r\n                  <img className=\"mail\" src={mailImg} alt=\"Mail Png\" />\r\n                  <p className=\"title\">No message yet.</p>\r\n                  <p className=\"subtitle\">\r\n                    Once you connect, your messages will be displayed here.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </SocketProvider>\r\n  );\r\n};\r\n\r\nexport default Messanger;\r\n",["222","223"],"F:\\reactjs\\prenotes\\src\\context\\BooksContext.js",[],"F:\\reactjs\\prenotes\\src\\components\\Exam\\Search\\ExamSearch.jsx",["224","225","226","227","228","229","230"],"F:\\reactjs\\prenotes\\src\\components\\Home\\Home.jsx",["231"],"import React from \"react\";\r\nimport { Row, Card, Col, Input } from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Slider from \"./UserSlider\";\r\nimport TableImg from \"../../assets/images/boytable.svg\";\r\nimport {\r\n  BookOutlined,\r\n  UploadOutlined,\r\n  EnvironmentOutlined,\r\n  FileTextOutlined,\r\n  HeartOutlined,\r\n  CoffeeOutlined,\r\n} from \"@ant-design/icons\";\r\nimport \"./home.css\";\r\nimport Feedback from \"./Feedback\";\r\n\r\nconst { Search } = Input;\r\nconst Home = () => {\r\n  let history = useHistory();\r\n  const onSearch = (value) => {\r\n    if (value) {\r\n      history.push(\"/notes/search\", {\r\n        string: value,\r\n        edit: true,\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"home_wrapper\">\r\n      <section className=\"search_container\">\r\n        <Row gutter={16}>\r\n          <Col md={12} xs={24}>\r\n            <div className=\"search_wrapper\">\r\n              <div className=\"title_wrapper\">\r\n                <h2 className=\"title\">Access and Learn from notes </h2>\r\n                <h2 className=\"title\">anywhere anytime. </h2>\r\n\r\n                <div className=\"sub_wrapper\">\r\n                  <p className=\"subTitle\">\r\n                    Upload and share notes with ease. Prenotes helps you to find\r\n                    ongoing tuition classes inside campus.\r\n                  </p>\r\n                </div>\r\n                <Search\r\n                  placeholder=\"Search your Topic here....\"\r\n                  onSearch={onSearch}\r\n                  enterButton\r\n                  size=\"large\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </Col>\r\n          <Col md={12} xs={0}>\r\n            <div className=\"img_wrapper\">\r\n              <img src={TableImg} alt=\"study Image\" />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </section>\r\n      <section className=\"prenotes_wrapper\">\r\n        <div className=\"title_wrapper\">\r\n          <span className=\"title\">Why use Prenotes?</span>\r\n          <div className=\"hr\" />\r\n        </div>\r\n        <div className=\"card_wrapper\">\r\n          <Row gutter={[16, 16]}>\r\n            <Col md={6} sm={12} xs={24}>\r\n              <Card>\r\n                <div className=\"icon_wrapper\">\r\n                  <UploadOutlined />\r\n                </div>\r\n                <h2 className=\"subTitle\">Upload/Download Notes</h2>\r\n                <div className=\"info\">\r\n                  Search for the notes you want and download. Upload your notes\r\n                  to share.\r\n                </div>\r\n              </Card>\r\n            </Col>\r\n            <Col md={6} sm={12} xs={24}>\r\n              <Card>\r\n                <div className=\"icon_wrapper\">\r\n                  <BookOutlined />\r\n                </div>\r\n                <h2 className=\"subTitle\">Buy/Sell Books</h2>\r\n                <div className=\"info\">\r\n                  Students can buy, sell or even give books on rent for free or\r\n                  at an affordable price.\r\n                </div>\r\n              </Card>\r\n            </Col>\r\n            <Col md={6} sm={12} xs={24}>\r\n              <Card>\r\n                <div className=\"icon_wrapper\">\r\n                  <EnvironmentOutlined />\r\n                </div>\r\n                <h2 className=\"subTitle\">Tuitions Inside Campus</h2>\r\n                <div className=\"info\">\r\n                  Look for the tuitions detail going inside the campus related\r\n                  to your subjects of interest.\r\n                </div>\r\n              </Card>\r\n            </Col>\r\n            <Col md={6} sm={12} xs={24}>\r\n              <Card>\r\n                <div className=\"icon_wrapper\">\r\n                  <FileTextOutlined />\r\n                </div>\r\n                <h2 className=\"subTitle\">Question Bank</h2>\r\n                <div className=\"info\">\r\n                  Upload question papers and solutions that can be helpful to\r\n                  other students.\r\n                </div>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </section>\r\n      <section className=\"user_wrapper\">\r\n        <div className=\"title_wrapper\">\r\n          <span className=\"title\">What our Users say</span>\r\n          <div className=\"hr\" />\r\n          <div className=\"slider_wrapper\">\r\n            <Slider />\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <section className=\"feed_wrapper\">\r\n        <div className=\"title_wrapper\">\r\n          <span className=\"title\">Give your Feedback</span>\r\n          <div className=\"hr\" />\r\n        </div>\r\n        <Card>\r\n          <Feedback />\r\n        </Card>\r\n      </section>\r\n      <section className=\"made_wrapper\">\r\n        <div className=\"title_wrapper\">\r\n          <h2>\r\n            Made with <HeartOutlined /> and lots of <CoffeeOutlined />\r\n          </h2>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","F:\\reactjs\\prenotes\\src\\components\\Navbar\\MenuItems.jsx",[],"F:\\reactjs\\prenotes\\src\\context\\SocketProvider.js",[],"F:\\reactjs\\prenotes\\src\\components\\Messanger\\ChatContainer.jsx",["232","233"],"import {\r\n  EllipsisOutlined,\r\n  SendOutlined,\r\n  DeleteOutlined,\r\n  LoadingOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Avatar, Button, Form, Input, message, Popover } from \"antd\";\r\nimport React, { useEffect, useCallback, useState } from \"react\";\r\nimport { useSocket } from \"../../context/SocketProvider\";\r\nimport useSessionStorage from \"../../helper/useSessionStorage\";\r\nimport http from \"../../services/httpService\";\r\nconst BASEURL = process.env.REACT_APP_BASE_URL;\r\nconst ChatContainer = ({ id, friendDetails }) => {\r\n  const [form] = Form.useForm();\r\n  const [messageList, setMessagesList] = useSessionStorage(\"messages\", []);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [status, setStatus] = useState(null);\r\n  const socket = useSocket();\r\n\r\n  const setRef = useCallback((node) => {\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true });\r\n    }\r\n  }, []);\r\n\r\n  const getMessages = (id) => {\r\n    setIsLoading(true);\r\n    http\r\n      .get(\"messages/msg/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setMessagesList(res.messages.messages);\r\n        setStatus(res.messages.status);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (friendDetails.roomId) getMessages(friendDetails.roomId);\r\n  }, [friendDetails.roomId]);\r\n\r\n  const handleSubmit = (val) => {\r\n    let data = {\r\n      sender: id,\r\n      recipient: friendDetails.id,\r\n      text: val.msg,\r\n      roomId: friendDetails.roomId,\r\n    };\r\n\r\n    socket.emit(\"send-message\", data);\r\n    setMessagesList((prev) => [...prev, { sender: id, text: val.msg }]);\r\n    form.resetFields();\r\n  };\r\n\r\n  const validateMessages = {\r\n    required: \"\",\r\n  };\r\n\r\n  const handleMessages = (msg) => {\r\n    if (!status) setMessagesList((prev) => [...prev, msg]);\r\n  };\r\n\r\n  const handleBlock = () => {\r\n    if (!friendDetails.roomId) return;\r\n\r\n    let data = { id: id, roomId: friendDetails.roomId };\r\n    http\r\n      .post(\"messages/block\", data)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        getMessages(friendDetails.roomId);\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  const handleUnBlock = () => {\r\n    if (!friendDetails.roomId) return;\r\n\r\n    let data = { roomId: friendDetails.roomId };\r\n    http\r\n      .post(\"messages/unblock\", data)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        getMessages(friendDetails.roomId);\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n\r\n  const handleDelMsg = (id) => {\r\n    const msgs = messageList.filter((msg) => msg.id !== id);\r\n    setMessagesList(msgs);\r\n    if (!friendDetails.roomId) return;\r\n\r\n    let data = { id: id, roomId: friendDetails.roomId };\r\n    http\r\n      .post(\"messages/delmsg\", data)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n      })\r\n      .catch((err) => {});\r\n  };\r\n  console.log(\"stat\", status, \"id\", id, status === id);\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\"receive-message\", handleMessages);\r\n\r\n    return () => socket.off(\"receive-message\");\r\n  }, [socket]);\r\n  return (\r\n    <div className=\"msg_box\">\r\n      <header>\r\n        <div className=\"user\">\r\n          <Avatar\r\n            size={{ xs: 24, sm: 32, md: 40 }}\r\n            src={\r\n              status\r\n                ? null\r\n                : friendDetails.userDetails.profileImg != null\r\n                ? BASEURL + friendDetails.userDetails.profileImg\r\n                : null\r\n            }\r\n          >\r\n            {friendDetails.userDetails.name\r\n              ? friendDetails.userDetails.name.charAt(0)\r\n              : \"\"}\r\n          </Avatar>\r\n          <p className=\"username\"> {friendDetails.userDetails.name}</p>\r\n        </div>\r\n        {status ? (\r\n          status === id ? (\r\n            <Popover\r\n              placement=\"bottomRight\"\r\n              title={null}\r\n              content={\r\n                <Button type=\"text\" onClick={handleUnBlock}>\r\n                  UnBlock\r\n                </Button>\r\n              }\r\n              trigger=\"click\"\r\n            >\r\n              <EllipsisOutlined rotate={90} />\r\n            </Popover>\r\n          ) : null\r\n        ) : (\r\n          <Popover\r\n            placement=\"bottomRight\"\r\n            title={null}\r\n            content={\r\n              <Button type=\"text\" onClick={handleBlock}>\r\n                Block\r\n              </Button>\r\n            }\r\n            trigger=\"click\"\r\n          >\r\n            <EllipsisOutlined rotate={90} />\r\n          </Popover>\r\n        )}\r\n      </header>\r\n      <div className=\"chat_container\">\r\n        <div className=\"messages\">\r\n          {isLoading ? (\r\n            <LoadingOutlined\r\n              style={{ fontSize: 24, alignSelf: \"center\" }}\r\n              spin\r\n            />\r\n          ) : (\r\n            messageList.map((item, i) => {\r\n              const lastMsg = messageList.length - 1 === i;\r\n              return (\r\n                <Popover\r\n                  placement=\"bottom\"\r\n                  title={null}\r\n                  content={\r\n                    <DeleteOutlined\r\n                      style={{ color: \"#d51111\" }}\r\n                      onClick={() => handleDelMsg(item.id)}\r\n                    />\r\n                  }\r\n                  trigger=\"click\"\r\n                  key={i}\r\n                >\r\n                  <div\r\n                    ref={lastMsg ? setRef : null}\r\n                    className={`${item.sender === id ? \"me\" : \"from\"}`}\r\n                  >\r\n                    {item.text}\r\n                  </div>\r\n                </Popover>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n        <Form\r\n          form={form}\r\n          className=\"form\"\r\n          onFinish={handleSubmit}\r\n          validateMessages={validateMessages}\r\n        >\r\n          {status ? (\r\n            <div className=\"blockmsg\">\r\n              <p>\r\n                You cannot send message to {friendDetails.userDetails.name}.{\" \"}\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <Form.Item name=\"msg\" rules={[{ required: true }]}>\r\n                <Input.TextArea rows={1} />\r\n              </Form.Item>\r\n              <div className=\"btn\">\r\n                <Button shape=\"circle\" htmlType=\"submit\" disabled={isLoading}>\r\n                  <SendOutlined />\r\n                </Button>\r\n              </div>\r\n            </>\r\n          )}\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;\r\n","F:\\reactjs\\prenotes\\src\\components\\Messanger\\ChatContacts.jsx",[],"F:\\reactjs\\prenotes\\src\\index.js",[],["234","235"],"F:\\reactjs\\prenotes\\src\\context\\AuthContext.js",[],"F:\\reactjs\\prenotes\\src\\helper\\SecureStorage.js",[],"F:\\reactjs\\prenotes\\src\\components\\Books\\Sell\\SellBook.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Home\\Feedback.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\Notes\\Notes.jsx",["236"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Button, Card, Col, Popconfirm, Row, message, Skeleton } from \"antd\";\r\nimport { Context as AuthContext } from \"../../../../context/AuthContext\";\r\nimport { Context as NotesContext } from \"../../../../context/NotesContext\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport http from \"../../../../services/httpService\";\r\nfunction getCategory(id) {\r\n  switch (id) {\r\n    case 1:\r\n      return \"Physics\";\r\n    case 2:\r\n      return \"Chemistry\";\r\n    case 3:\r\n      return \"Mathematics\";\r\n    case 4:\r\n      return \"Computer\";\r\n    case 5:\r\n      return \"Mechanical\";\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nconst Notes = () => {\r\n  const {\r\n    state: { userData },\r\n  } = useContext(AuthContext);\r\n  const {\r\n    state: { notesData, isLoading },\r\n    getNotes,\r\n  } = useContext(NotesContext);\r\n\r\n  const deleteNotes = (id) => {\r\n    http\r\n      .delete(\"upload/delNotes/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Deleted Successfully\", 3);\r\n        getNotes(userData.iduser);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getNotes(userData.iduser);\r\n    else return;\r\n  }, [userData.iduser]);\r\n  return (\r\n    <div>\r\n      <Row gutter={[16, 16]}>\r\n        {isLoading ? (\r\n          <>\r\n            <Col md={12} xs={24}>\r\n              <Card className=\"itemWrapper\">\r\n                <Skeleton active rows={1} paragraph={false} />\r\n              </Card>\r\n            </Col>\r\n            <Col md={12} xs={24}>\r\n              <Card className=\"itemWrapper\">\r\n                <Skeleton active rows={1} paragraph={false} />\r\n              </Card>\r\n            </Col>\r\n          </>\r\n        ) : notesData.length > 0 ? (\r\n          notesData.map((item) => {\r\n            return (\r\n              <Col key={item.idnotes} md={12} xs={24}>\r\n                <div className=\"innerWrapper\">\r\n                  <Card className=\"itemWrapper\">\r\n                    <Row gutter={8}>\r\n                      <Col md={18} xs={18}>\r\n                        <h3>{item.topic}</h3>\r\n                        <p>{getCategory(item.category)}</p>\r\n                      </Col>\r\n                      <Col md={6} xs={6}>\r\n                        <div className=\"btnWrapper\">\r\n                          <Popconfirm\r\n                            placement=\"topRight\"\r\n                            title=\"\r\n                        Are you sure you want to delete?\"\r\n                            onConfirm={() => deleteNotes(item.idnotes)}\r\n                            okText=\"Yes\"\r\n                            cancelText=\"No\"\r\n                          >\r\n                            <Button\r\n                              danger\r\n                              type=\"link\"\r\n                              shape=\"circle\"\r\n                              icon={<DeleteOutlined />}\r\n                            />\r\n                          </Popconfirm>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card>\r\n                </div>\r\n              </Col>\r\n            );\r\n          })\r\n        ) : (\r\n          <Col md={12} xs={24}>\r\n            <Card>No Records</Card>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n",["237","238"],"F:\\reactjs\\prenotes\\src\\components\\Notes\\Search\\NotesSearch.jsx",["239","240","241","242","243"],"import {\r\n  FacebookOutlined,\r\n  MessageOutlined,\r\n  SearchOutlined,\r\n  ShareAltOutlined,\r\n  WhatsAppOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Modal,\r\n  Result,\r\n  Row,\r\n  Select,\r\n  Skeleton,\r\n  Tooltip,\r\n} from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport bg from \"../../../assets/bg/books.png\";\r\nimport { Context as AuthContext } from \"../../../context/AuthContext\";\r\nimport http from \"../../../services/httpService\";\r\nimport \"./notessearch.css\";\r\n\r\nconst { Option } = Select;\r\n\r\nfunction getCategory(id) {\r\n  switch (id) {\r\n    case 1:\r\n      return \"Physics\";\r\n    case 2:\r\n      return \"Chemistry\";\r\n    case 3:\r\n      return \"Mathematics\";\r\n    case 4:\r\n      return \"Computer\";\r\n    case 5:\r\n      return \"Mechanical\";\r\n\r\n    default:\r\n      break;\r\n  }\r\n}\r\nconst NotesSearch = (props) => {\r\n  console.log(props);\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [notesData, setNotesData] = useState([]);\r\n  const [visibleModal, setVisibleModal] = useState(false);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const [queryForm] = Form.useForm();\r\n  const onFinish = (val) => {\r\n    setIsLoading(true);\r\n    http\r\n      .get(\"upload/searchNotes\", {\r\n        params: {\r\n          ...val,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setNotesData(res.notesData);\r\n        setTimeout(() => {\r\n          setIsLoading(false);\r\n        }, 3000);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        if (err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  const getAllNotes = () => {\r\n    setIsLoading(true);\r\n    http\r\n      .get(\"upload/allNotes\")\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setNotesData(res.notesData);\r\n        setTimeout(() => {\r\n          setIsLoading(false);\r\n        }, 3000);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  const handleQuery = (val) => {\r\n    console.log(val);\r\n    if (!userData.iduser) {\r\n      return;\r\n    }\r\n    if (!selectedFile) {\r\n      return;\r\n    }\r\n    console.log(selectedFile);\r\n    let formData = {\r\n      senderId: userData.iduser,\r\n      senderName: userData.name,\r\n      receiverId: selectedFile.iduser,\r\n      receiverStatus: 0,\r\n      forid: selectedFile.idnotes,\r\n      title: selectedFile.topic,\r\n      query: val.query,\r\n      for: 2,\r\n      status: 0,\r\n    };\r\n    http\r\n      .post(\"notification/notifi\", formData)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Your request was sent successfully\");\r\n        setVisibleModal(false);\r\n        queryForm.resetFields();\r\n        selectedFile(null);\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.location.state) {\r\n      let data = { topic: props.location.state.string, category: 0 };\r\n      form.setFieldsValue({\r\n        ...data,\r\n      });\r\n\r\n      onFinish(data);\r\n    } else {\r\n      getAllNotes();\r\n    }\r\n\r\n    return () => {\r\n      setNotesData([]);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"notesSearch_wrapper\">\r\n      <header>\r\n        <img src={bg} alt=\"bg\" />\r\n        <div className=\"input_wrapper\">\r\n          <div className=\"title\">\r\n            <h3 className=\"titletext\">Search.Study.Share</h3>\r\n            <p className=\"subtitle\">\r\n              Find study related materials inside campus.\r\n            </p>\r\n          </div>\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            initialValues={{ topic: \"\" }}\r\n            name=\"basic\"\r\n            onFinish={onFinish}\r\n          >\r\n            <Row gutter={[16, 16]}>\r\n              <Col md={13} sm={24} xs={24}>\r\n                <Form.Item name=\"topic\">\r\n                  <Input\r\n                    placeholder=\"What are you looking for...\"\r\n                    autoComplete=\"off\"\r\n                    size=\"large\"\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col md={8} sm={12} xs={12}>\r\n                <Form.Item name=\"category\">\r\n                  <Select placeholder=\"Category\" size=\"large\">\r\n                    <Option value={0}>All</Option>\r\n                    <Option value={1}>Physics</Option>\r\n                    <Option value={2}>Chemistry</Option>\r\n                    <Option value={3}>Mathematics</Option>\r\n                    <Option value={4}>Computer</Option>\r\n                    <Option value={5}>Mechanical</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              </Col>\r\n              <Col md={3} sm={12} xs={12}>\r\n                <Form.Item>\r\n                  <div className=\"btn_wrapper\">\r\n                    <Button htmlType=\"submit\" size=\"large\">\r\n                      <SearchOutlined />\r\n                    </Button>\r\n                  </div>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </header>\r\n      <main className=\"notesSearch_body\">\r\n        <Row gutter={[16, 32]}>\r\n          {isLoading ? (\r\n            <>\r\n              <Col md={6} xs={24}>\r\n                <div className=\"innerWrapper\">\r\n                  <Card className=\"itemWrapper\">\r\n                    <Skeleton active />\r\n                  </Card>\r\n                </div>\r\n              </Col>\r\n              <Col md={6} xs={24}>\r\n                <div className=\"innerWrapper\">\r\n                  <Card className=\"itemWrapper\">\r\n                    <Skeleton active />\r\n                  </Card>\r\n                </div>\r\n              </Col>\r\n              <Col md={6} xs={24}>\r\n                <div className=\"innerWrapper\">\r\n                  <Card className=\"itemWrapper\">\r\n                    <Skeleton active />\r\n                  </Card>\r\n                </div>\r\n              </Col>\r\n            </>\r\n          ) : notesData.length > 0 ? (\r\n            notesData.map((item) => {\r\n              let id = item.iduser;\r\n              return (\r\n                <Col key={item.idnotes} md={6} xs={24}>\r\n                  <div className=\"innerWrapper\">\r\n                    <a href={BASEURL + item.fileLink} target=\"_blank\">\r\n                      <Card className=\"itemWrapper\">\r\n                        <h3>{item.topic}</h3>\r\n                        <p>{getCategory(item.category)}</p>\r\n                      </Card>\r\n                    </a>\r\n                    <div className=\"btn_wrapper\">\r\n                      {userData\r\n                        ? userData.iduser &&\r\n                          userData.iduser != id && (\r\n                            <MessageOutlined\r\n                              onClick={() => {\r\n                                setSelectedFile(item);\r\n                                setVisibleModal(true);\r\n                              }}\r\n                            />\r\n                          )\r\n                        : null}\r\n                      <Tooltip\r\n                        className=\"share\"\r\n                        trigger={[\"click\"]}\r\n                        color={\"#fff\"}\r\n                        title={\r\n                          <>\r\n                            <a\r\n                              href={`https://web.whatsapp.com/send?text=${\r\n                                BASEURL + item.fileLink\r\n                              }`}\r\n                              data-action=\"share/whatsapp/share\"\r\n                              target=\"_blank\"\r\n                            >\r\n                              <WhatsAppOutlined className=\"shareBtn whatsappBtn\" />{\" \"}\r\n                            </a>\r\n                            <a\r\n                              href={`https://www.facebook.com/sharer/sharer.php?u=${\r\n                                BASEURL + item.fileLink\r\n                              }`}\r\n                              target=\"_blank\"\r\n                            >\r\n                              <FacebookOutlined className=\"shareBtn fb\" />\r\n                            </a>\r\n                          </>\r\n                        }\r\n                        icon={null}\r\n                      >\r\n                        <ShareAltOutlined />\r\n                      </Tooltip>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              );\r\n            })\r\n          ) : (\r\n            <Col md={24} xs={24}>\r\n              <Result\r\n                status=\"404\"\r\n                title=\"No Results Found\"\r\n                subTitle={null}\r\n                // extra={<Button type=\"primary\">Back Home</Button>}\r\n              />\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </main>\r\n      <Modal\r\n        className=\"queryModal\"\r\n        visible={visibleModal}\r\n        onCancel={() => setVisibleModal(false)}\r\n        closeIcon={<></>}\r\n        footer={null}\r\n        style={{ textAlign: \"center\", maxWidth: \"300px\" }}\r\n      >\r\n        <Form\r\n          form={queryForm}\r\n          layout=\"vertical\"\r\n          name=\"basic\"\r\n          onFinish={handleQuery}\r\n        >\r\n          <Form.Item\r\n            name=\"query\"\r\n            label=\"Ask A Question\"\r\n            rules={[{ required: true, message: \"Required\" }]}\r\n          >\r\n            <Input autoComplete=\"off\" size=\"large\" />\r\n          </Form.Item>\r\n          <div className=\"btn_wrap\">\r\n            <Button className=\"btn-primary\" htmlType=\"submit\">\r\n              Send Request\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotesSearch;\r\n","F:\\reactjs\\prenotes\\src\\components\\Navbar\\Navbar.jsx",["244"],"import React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport { Drawer, Button, Grid, Menu, Modal } from \"antd\";\r\nimport { NavLink, withRouter, useHistory } from \"react-router-dom\";\r\nimport PrenotesLogo from \"../../assets/images/logo.svg\";\r\nimport MenuItems from \"./MenuItems\";\r\nimport { BellOutlined, MessageOutlined } from \"@ant-design/icons\";\r\nimport { Context as AuthContext } from \"../../context/AuthContext\";\r\nimport SignIn from \"../Auth/Signin\";\r\nimport \"./navbar.css\";\r\nconst { useBreakpoint } = Grid;\r\n\r\nconst Navbar = ({ location }) => {\r\n  const { md } = useBreakpoint();\r\n  let history = useHistory();\r\n  const { state } = useContext(AuthContext);\r\n  const { loginFlag } = state;\r\n  const [visible, setVisible] = useState(false);\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleClick = ({ key }) => {\r\n    console.log(key);\r\n  };\r\n\r\n  const goToSignUp = () => {\r\n    if (onClose) onClose();\r\n    history.push(\"/signup\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (location.pathname === \"/\" && location.state) {\r\n      if (location.state.login === true) {\r\n        showModal();\r\n        history.push(\"/\", {});\r\n      }\r\n    }\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    if (md) onClose();\r\n  }, [md]);\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"app_container\">\r\n        <div className=\"navbar\">\r\n          <NavLink to=\"/\">\r\n            <div className=\"logo\">\r\n              <img className=\"logoimg\" src={PrenotesLogo} alt=\"logo\" />\r\n            </div>\r\n          </NavLink>\r\n          <div className=\"navMenu\">\r\n            <div className=\"rightMenu\">\r\n              {loginFlag === false && (\r\n                <div className=\"signbtnWrapper\">\r\n                  <Menu mode={\"horizontal\"} onClick={handleClick}>\r\n                    <Menu.Item key=\"/\" onClick={() => showModal()}>\r\n                      Sign in\r\n                    </Menu.Item>\r\n                  </Menu>\r\n                  <Button className=\"signupBtn\" onClick={goToSignUp}>\r\n                    Sign up\r\n                  </Button>\r\n                  <Modal\r\n                    visible={isModalVisible}\r\n                    onOk={handleOk}\r\n                    onCancel={handleCancel}\r\n                    footer={null}\r\n                    width={400}\r\n                    className=\"sign_modal\"\r\n                  >\r\n                    <SignIn handleCancel={handleCancel} />\r\n                  </Modal>\r\n                </div>\r\n              )}\r\n              <MenuItems />\r\n            </div>\r\n            <div className=\"mob_wrapper\">\r\n              <div className=\"mob_container\">\r\n                {loginFlag === false && (\r\n                  <div className=\"mobSignbtnWrapper\">\r\n                    <Menu mode={\"horizontal\"} onClick={handleClick}>\r\n                      <Menu.Item key=\"/\" onClick={() => showModal()}>\r\n                        Sign in\r\n                      </Menu.Item>\r\n                    </Menu>\r\n                    <Button className=\"signupBtn\" onClick={goToSignUp}>\r\n                      Sign up\r\n                    </Button>\r\n                    <Modal\r\n                      visible={isModalVisible}\r\n                      onOk={handleOk}\r\n                      onCancel={handleCancel}\r\n                      footer={null}\r\n                      width={400}\r\n                      className=\"sign_modal\"\r\n                    >\r\n                      <SignIn handleCancel={handleCancel} />\r\n                    </Modal>\r\n                  </div>\r\n                )}\r\n                {loginFlag === false ? null : (\r\n                  <>\r\n                    <Menu mode={\"horizontal\"}>\r\n                      <Menu.Item key=\"/notification\">\r\n                        <NavLink to=\"/notification\">\r\n                          <BellOutlined />\r\n                        </NavLink>\r\n                      </Menu.Item>\r\n\r\n                      <Menu.Item key=\"/messages\">\r\n                        <NavLink to=\"/messages\">\r\n                          <MessageOutlined />\r\n                        </NavLink>\r\n                      </Menu.Item>\r\n                    </Menu>\r\n                    <Button className=\"hamburger\" onClick={showDrawer}>\r\n                      <span className=\"barsBtn\"></span>\r\n                    </Button>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Drawer\r\n          title={\r\n            <img className=\"drawerlogoimg\" src={PrenotesLogo} alt=\"logo\" />\r\n          }\r\n          placement=\"left\"\r\n          onClose={onClose}\r\n          visible={visible}\r\n          className=\"sidenav\"\r\n        >\r\n          <MenuItems />\r\n        </Drawer>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default withRouter(Navbar);\r\n","F:\\reactjs\\prenotes\\src\\components\\Books\\Buy\\BuyBook.jsx",["245","246","247"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Result,\r\n  Skeleton,\r\n} from \"antd\";\r\n\r\nimport { Context as AuthContext } from \"../../../context/AuthContext\";\r\nimport http from \"../../../services/httpService\";\r\nimport bg from \"../../../assets/bg/books.png\";\r\n\r\nimport \"../../Notes/Search/notessearch.css\";\r\nimport \"./buybook.css\";\r\nimport { SearchOutlined } from \"@ant-design/icons\";\r\n\r\nconst BuyBook = () => {\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [booksData, setBooksData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const onFinish = (val) => {\r\n    setIsLoading(true);\r\n    let data = {\r\n      id: userData.iduser,\r\n      ...val,\r\n    };\r\n    http\r\n      .post(\"upload/searchBooks\", data)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        let filterData = res.booksData.filter(\r\n          (item) => item.institute === userData.institute\r\n        );\r\n        setBooksData(filterData);\r\n        setTimeout(() => {\r\n          setIsLoading(false);\r\n        }, 2000);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        if (err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  const getAllBooks = (id) => {\r\n    setIsLoading(true);\r\n    http\r\n      .get(\"upload/allBooks/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        let filterData = res.booksData.filter(\r\n          (item) => item.institute === userData.institute\r\n        );\r\n        setBooksData(filterData);\r\n        setTimeout(() => {\r\n          setIsLoading(false);\r\n        }, 2000);\r\n      })\r\n      .catch((err) => {\r\n        setIsLoading(false);\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  const handleReq = (data) => {\r\n    if (!userData.iduser) {\r\n      return;\r\n    }\r\n    let formData = {\r\n      senderId: userData.iduser,\r\n      senderName: userData.name,\r\n      receiverId: data.iduser,\r\n      receiverStatus: 0,\r\n      forid: data.idbook,\r\n      title: data.bookName,\r\n      query: null,\r\n      for: 1,\r\n      status: 0,\r\n    };\r\n    http\r\n      .post(\"notification/notifi\", formData)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Your request was sent successfully\");\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getAllBooks(userData.iduser);\r\n  }, [userData.iduser]);\r\n\r\n  return (\r\n    <div className=\"notesSearch_wrapper\">\r\n      <header>\r\n        <img src={bg} alt=\"image\" />\r\n        <div className=\"input_wrapper\">\r\n          <div className=\"title\">\r\n            <h3 className=\"titletext\">Search.Study.Share</h3>\r\n            <p className=\"subtitle\">\r\n              Find Books of your interest within the campus.\r\n            </p>\r\n          </div>\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            initialValues={{ topic: \"\" }}\r\n            name=\"basic\"\r\n            onFinish={onFinish}\r\n          >\r\n            <Row gutter={[16, 16]}>\r\n              <Col md={21} sm={18} xs={18}>\r\n                <Form.Item name=\"text\">\r\n                  <Input\r\n                    placeholder=\"Enter Title, Author\"\r\n                    autoComplete=\"off\"\r\n                    size=\"large\"\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n\r\n              <Col md={3} sm={6} xs={6}>\r\n                <Form.Item>\r\n                  <div className=\"btn_wrapper\">\r\n                    <Button htmlType=\"submit\" size=\"large\">\r\n                      <SearchOutlined />\r\n                    </Button>\r\n                  </div>\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </header>\r\n      <main className=\"booksSearch_body\">\r\n        <Row gutter={[16, 16]}>\r\n          {isLoading ? (\r\n            <>\r\n              <Col md={8} xs={24}>\r\n                <Card className=\"itemWrapper\">\r\n                  <div className=\"book_wrapper\">\r\n                    <Skeleton.Image active />\r\n\r\n                    <div className=\"book_body\" style={{ flex: 1 }}>\r\n                      <Skeleton active paragraph={true} />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"btn-wrapper\">\r\n                    <Skeleton.Input\r\n                      style={{ width: \"100% !important\" }}\r\n                      active\r\n                      size=\"large\"\r\n                    />\r\n                  </div>\r\n                </Card>\r\n              </Col>\r\n              <Col md={8} xs={24}>\r\n                <Card className=\"itemWrapper\">\r\n                  <div className=\"book_wrapper\">\r\n                    <Skeleton.Image active />\r\n\r\n                    <div className=\"book_body\" style={{ flex: 1 }}>\r\n                      <Skeleton active paragraph={true} />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"btn-wrapper\">\r\n                    <Skeleton.Input\r\n                      style={{ width: \"100% !important\" }}\r\n                      active\r\n                      size=\"large\"\r\n                    />\r\n                  </div>\r\n                </Card>\r\n              </Col>\r\n            </>\r\n          ) : booksData.length > 0 ? (\r\n            booksData.map((item) => {\r\n              return (\r\n                <Col md={8} xs={24}>\r\n                  <Card className=\"itemWrapper\">\r\n                    <div className=\"book_wrapper\">\r\n                      <img className=\"img\" src={BASEURL + item.fileLink} />\r\n\r\n                      <div className=\"book_body\">\r\n                        <div className=\"dec\">\r\n                          <p className=\"title\">{item.bookName}</p>\r\n                          <p className=\"subtitle\">{item.authorName}</p>\r\n                          <p className=\"subtitle\"> {item.publisherName} </p>\r\n                        </div>\r\n\r\n                        <p className=\"price\">₹ {item.price}</p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"btn-wrapper\">\r\n                      <Button onClick={() => handleReq(item)}>\r\n                        Send Request\r\n                      </Button>\r\n                    </div>\r\n                  </Card>\r\n                </Col>\r\n              );\r\n            })\r\n          ) : (\r\n            <Col md={24} xs={24}>\r\n              <Result\r\n                status=\"404\"\r\n                title=\"No Results Found\"\r\n                subTitle={null}\r\n                // extra={<Button type=\"primary\">Back Home</Button>}\r\n              />\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuyBook;\r\n","F:\\reactjs\\prenotes\\src\\components\\Auth\\Signup.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Footer\\Footer.jsx",[],"F:\\reactjs\\prenotes\\src\\context\\NotesContext.js",[],"F:\\reactjs\\prenotes\\src\\context\\ConversationsProvider.js",["248"],"F:\\reactjs\\prenotes\\src\\components\\Profile\\MyUpload\\MyUpload.jsx",[],"F:\\reactjs\\prenotes\\src\\helper\\useSessionStorage.js",[],["249","250"],"F:\\reactjs\\prenotes\\src\\components\\Tuition\\Reg\\Reg.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\Tuition\\Find\\View.jsx",["251","252","253","254"],"import {\r\n  EnvironmentOutlined,\r\n  FieldTimeOutlined,\r\n\r\n  InfoCircleFilled, MessageFilled\r\n} from \"@ant-design/icons\";\r\nimport { Avatar, Card, Col, message, Popover, Row } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Context as AuthContext } from \"../../../context/AuthContext\";\r\nimport http from \"../../../services/httpService\";\r\nimport \"./view.css\";\r\n\r\nconst View = (props) => {\r\n  console.log(props);\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [tutionData, setTutionData] = useState([]);\r\n\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  const getAllTutions = (id) => {\r\n    http\r\n      .get(\"tutor/alltutors/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        let filterData = res.tutorData.filter(\r\n          (item) =>\r\n            item.institute === userData.institute &&\r\n            (item.for === userData.gender || item.for === \"All\")\r\n        );\r\n        setTutionData(filterData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  const handleQuery = (val) => {\r\n    console.log(val);\r\n    if (!userData.iduser) {\r\n      return;\r\n    }\r\n\r\n    let formData = {\r\n      senderId: userData.iduser,\r\n      senderName: userData.name,\r\n      receiverId: val.iduser,\r\n      receiverStatus: 0,\r\n      forid: val.id,\r\n      title: val.subject + \"Tution\",\r\n      query: \"Can we connect\",\r\n      for: 2,\r\n      status: 0,\r\n    };\r\n    http\r\n      .post(\"notification/notifi\", formData)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Your request was sent successfully\");\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getAllTutions(userData.iduser);\r\n\r\n    return () => {\r\n      setTutionData([]);\r\n    };\r\n  }, [userData.iduser]);\r\n\r\n  return (\r\n    <div className=\"tutorview_wrapper\">\r\n      <main className=\"tutorview_body\">\r\n        <h3>Ongoing Tuitions details</h3>\r\n        <Row gutter={[16, 32]}>\r\n          {tutionData.length > 0\r\n            ? tutionData.map((item) => (\r\n                <Col md={8} sm={12} xs={24}>\r\n                  <Card>\r\n                    <div className=\"box\">\r\n                      <div className=\"userInfo\">\r\n                        <div className=\"userDetails\">\r\n                          <Avatar\r\n                            size={{\r\n                              xs: 40,\r\n                              sm: 50,\r\n                              md: 50,\r\n                              lg: 54,\r\n                              xl: 54,\r\n                              xxl: 54,\r\n                            }}\r\n                            style={{\r\n                              color: \"#f56a00\",\r\n                              backgroundColor: \"#fde3cf\",\r\n                            }}\r\n                            src={\r\n                              item.profileImg != null\r\n                                ? BASEURL + item.profileImg\r\n                                : null\r\n                            }\r\n                          >\r\n                            {item.tutorName ? item.tutorName.charAt(0) : \"\"}\r\n                          </Avatar>\r\n                          <div className=\"name\">\r\n                            <p className=\"title\"> {item.tutorName}</p>\r\n                            <div className=\"subtitle\">{item.subject}</div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"time\">\r\n                          <p>\r\n                            <FieldTimeOutlined />\r\n                            {new Date(item.timing).toLocaleTimeString(\"en-US\")}\r\n                          </p>\r\n                          <p className=\"day\">Every {item.day}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"price_wrapper\">\r\n                        <div className=\"price\">\r\n                          <p className=\"title\">\r\n                            ₹ {item.fees}{\" \"}\r\n                            <span className=\"subtitle\">/month</span>\r\n                          </p>\r\n                        </div>\r\n\r\n                        <div className=\"loc\">\r\n                          <p>\r\n                            <EnvironmentOutlined /> {item.loc}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"btn_wrapper\">\r\n                      <MessageFilled onClick={() => handleQuery(item)} />{\" \"}\r\n                      <Popover\r\n                        overlayClassName=\"popinfo\"\r\n                        placement=\"top\"\r\n                        title=\"Contact Details\"\r\n                        trigger={[\"click\", \"hover\"]}\r\n                        content={\r\n                          <>\r\n                            <p className=\"title\">\r\n                              Email:{\" \"}\r\n                              <span className=\"subtitle\">{item.email}</span>\r\n                            </p>\r\n                            {item.contact ? (\r\n                              <p className=\"title\">\r\n                                Contact No.:{\" \"}\r\n                                <span className=\"subtitle\">{item.contact}</span>\r\n                              </p>\r\n                            ) : null}\r\n                          </>\r\n                        }\r\n                        trigger=\"click\"\r\n                      >\r\n                        <InfoCircleFilled />\r\n                      </Popover>\r\n                    </div>\r\n                  </Card>\r\n                </Col>\r\n              ))\r\n            : null}\r\n        </Row>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default View;\r\n","F:\\reactjs\\prenotes\\src\\components\\Profile\\Tutor\\Tutor.jsx",["255","256"],"import {\r\n  EnvironmentOutlined,\r\n  FieldTimeOutlined,\r\n  DeleteOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Avatar, Button, Card, Col, message, Popconfirm, Row } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Context as AuthContext } from \"../../../context/AuthContext\";\r\nimport http from \"../../../services/httpService\";\r\nimport \"./tutor.css\";\r\n\r\nconst Tutor = (props) => {\r\n  console.log(props);\r\n  let BASEURL = process.env.REACT_APP_BASE_URL;\r\n  const { state } = useContext(AuthContext);\r\n  const { userData } = state;\r\n  const [tutionData, setTutionData] = useState([]);\r\n\r\n  const getAllTutions = (id) => {\r\n    http\r\n      .get(\"tutor/tutor/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        setTutionData(res.tutorData);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        if (!err.response) return message.error(\"Network Error\", 3);\r\n\r\n        if (err.response.status && err.response.status === 400)\r\n          message.error(err.response.data.message, 3);\r\n      });\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    http\r\n      .delete(\"tutor/deltutor/\" + id)\r\n      .then((res) => {\r\n        return res.data;\r\n      })\r\n      .then((res) => {\r\n        message.success(\"Deleted Successfully\", 3);\r\n        getAllTutions(userData.iduser);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userData.iduser) getAllTutions(userData.iduser);\r\n\r\n    return () => {\r\n      setTutionData([]);\r\n    };\r\n  }, [userData.iduser]);\r\n\r\n  return (\r\n    <div className=\"tutorview_wrapper\">\r\n      <main className=\"tutorview_body\">\r\n        <h3>Tuitions details</h3>\r\n        <Row gutter={[16, 32]}>\r\n          {tutionData.length > 0\r\n            ? tutionData.map((item) => (\r\n                <Col md={8} sm={12} xs={24}>\r\n                  <Card>\r\n                    <div className=\"box\">\r\n                      <div className=\"userInfo\">\r\n                        <div className=\"userDetails\">\r\n                          <div className=\"name\">\r\n                            <p className=\"title\"> {item.tutorName}</p>\r\n                            <div className=\"subtitle\">{item.subject}</div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"time\">\r\n                          <p>\r\n                            <FieldTimeOutlined />\r\n                            {new Date(item.timing).toLocaleTimeString(\"en-US\")}\r\n                          </p>\r\n                          <p className=\"day\">Every {item.day}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"price_wrapper\">\r\n                        <div className=\"price\">\r\n                          <p className=\"title\">\r\n                            ₹ {item.fees}{\" \"}\r\n                            <span className=\"subtitle\">/month</span>\r\n                          </p>\r\n                        </div>\r\n\r\n                        <div className=\"loc\">\r\n                          <p>\r\n                            <EnvironmentOutlined /> {item.loc}\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"btn_wrapper\">\r\n                      <Popconfirm\r\n                        placement=\"topRight\"\r\n                        title=\"\r\n                Are you sure you want to delete?\"\r\n                        onConfirm={() => handleDelete(item.id)}\r\n                        okText=\"Yes\"\r\n                        cancelText=\"No\"\r\n                      >\r\n                        <Button\r\n                          danger\r\n                          type=\"link\"\r\n                          shape=\"circle\"\r\n                          icon={<DeleteOutlined />}\r\n                        />\r\n                      </Popconfirm>\r\n                    </div>\r\n                  </Card>\r\n                </Col>\r\n              ))\r\n            : null}\r\n        </Row>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tutor;\r\n","F:\\reactjs\\prenotes\\src\\components\\Errors\\NotFound.jsx",[],"F:\\reactjs\\prenotes\\src\\components\\protectedRoute.jsx",[],{"ruleId":"257","severity":1,"message":"258","line":19,"column":45,"nodeType":"259","endLine":19,"endColumn":50},{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":35,"column":6,"nodeType":"266","endLine":35,"endColumn":8,"suggestions":"267"},{"ruleId":"257","severity":1,"message":"258","line":41,"column":33,"nodeType":"259","endLine":41,"endColumn":38},{"ruleId":"257","severity":1,"message":"258","line":42,"column":51,"nodeType":"259","endLine":42,"endColumn":56},{"ruleId":"257","severity":1,"message":"258","line":46,"column":13,"nodeType":"259","endLine":46,"endColumn":18},{"ruleId":"257","severity":1,"message":"258","line":52,"column":13,"nodeType":"259","endLine":52,"endColumn":18},{"ruleId":"257","severity":1,"message":"258","line":58,"column":13,"nodeType":"259","endLine":58,"endColumn":18},{"ruleId":"260","replacedBy":"268"},{"ruleId":"262","replacedBy":"269"},{"ruleId":"270","severity":1,"message":"271","line":3,"column":1,"nodeType":"272","endLine":21,"endColumn":3},{"ruleId":"270","severity":1,"message":"273","line":21,"column":1,"nodeType":"272","endLine":26,"endColumn":3},{"ruleId":"260","replacedBy":"274"},{"ruleId":"262","replacedBy":"275"},{"ruleId":"260","replacedBy":"276"},{"ruleId":"262","replacedBy":"277"},{"ruleId":"264","severity":1,"message":"278","line":192,"column":6,"nodeType":"266","endLine":192,"endColumn":16,"suggestions":"279"},{"ruleId":"260","replacedBy":"280"},{"ruleId":"262","replacedBy":"281"},{"ruleId":"264","severity":1,"message":"282","line":46,"column":6,"nodeType":"266","endLine":46,"endColumn":23,"suggestions":"283"},{"ruleId":"284","severity":1,"message":"285","line":51,"column":10,"nodeType":"286","messageId":"287","endLine":51,"endColumn":14},{"ruleId":"284","severity":1,"message":"288","line":56,"column":12,"nodeType":"286","messageId":"287","endLine":56,"endColumn":19},{"ruleId":"264","severity":1,"message":"289","line":63,"column":6,"nodeType":"266","endLine":63,"endColumn":23,"suggestions":"290"},{"ruleId":"291","severity":1,"message":"292","line":132,"column":64,"nodeType":"259","endLine":132,"endColumn":79},{"ruleId":"293","severity":1,"message":"294","line":140,"column":44,"nodeType":"295","messageId":"296","endLine":140,"endColumn":46},{"ruleId":"291","severity":1,"message":"292","line":143,"column":31,"nodeType":"259","endLine":143,"endColumn":46},{"ruleId":"264","severity":1,"message":"297","line":53,"column":6,"nodeType":"266","endLine":53,"endColumn":23,"suggestions":"298"},{"ruleId":"260","replacedBy":"299"},{"ruleId":"262","replacedBy":"300"},{"ruleId":"284","severity":1,"message":"301","line":12,"column":3,"nodeType":"286","messageId":"287","endLine":12,"endColumn":10},{"ruleId":"284","severity":1,"message":"302","line":22,"column":3,"nodeType":"286","messageId":"287","endLine":22,"endColumn":19},{"ruleId":"284","severity":1,"message":"303","line":24,"column":3,"nodeType":"286","messageId":"287","endLine":24,"endColumn":14},{"ruleId":"304","severity":1,"message":"305","line":143,"column":9,"nodeType":"306","endLine":143,"endColumn":37},{"ruleId":"291","severity":1,"message":"292","line":222,"column":64,"nodeType":"259","endLine":222,"endColumn":79},{"ruleId":"293","severity":1,"message":"294","line":226,"column":44,"nodeType":"295","messageId":"296","endLine":226,"endColumn":46},{"ruleId":"291","severity":1,"message":"292","line":229,"column":31,"nodeType":"259","endLine":229,"endColumn":46},{"ruleId":"304","severity":1,"message":"305","line":55,"column":15,"nodeType":"306","endLine":55,"endColumn":55},{"ruleId":"264","severity":1,"message":"307","line":46,"column":6,"nodeType":"266","endLine":46,"endColumn":28,"suggestions":"308"},{"ruleId":"264","severity":1,"message":"309","line":122,"column":6,"nodeType":"266","endLine":122,"endColumn":14,"suggestions":"310"},{"ruleId":"260","replacedBy":"311"},{"ruleId":"262","replacedBy":"312"},{"ruleId":"264","severity":1,"message":"313","line":52,"column":6,"nodeType":"266","endLine":52,"endColumn":23,"suggestions":"314"},{"ruleId":"260","replacedBy":"315"},{"ruleId":"262","replacedBy":"316"},{"ruleId":"264","severity":1,"message":"317","line":151,"column":6,"nodeType":"266","endLine":151,"endColumn":8,"suggestions":"318"},{"ruleId":"291","severity":1,"message":"292","line":238,"column":55,"nodeType":"259","endLine":238,"endColumn":70},{"ruleId":"293","severity":1,"message":"294","line":247,"column":43,"nodeType":"295","messageId":"296","endLine":247,"endColumn":45},{"ruleId":"291","severity":1,"message":"292","line":267,"column":31,"nodeType":"259","endLine":267,"endColumn":46},{"ruleId":"291","severity":1,"message":"292","line":275,"column":31,"nodeType":"259","endLine":275,"endColumn":46},{"ruleId":"264","severity":1,"message":"319","line":57,"column":6,"nodeType":"266","endLine":57,"endColumn":16,"suggestions":"320"},{"ruleId":"264","severity":1,"message":"321","line":112,"column":6,"nodeType":"266","endLine":112,"endColumn":23,"suggestions":"322"},{"ruleId":"304","severity":1,"message":"305","line":117,"column":9,"nodeType":"306","endLine":117,"endColumn":37},{"ruleId":"323","severity":1,"message":"324","line":203,"column":23,"nodeType":"306","endLine":203,"endColumn":76},{"ruleId":"325","severity":1,"message":"326","line":58,"column":74,"nodeType":"327","messageId":"328","endLine":58,"endColumn":76},{"ruleId":"260","replacedBy":"329"},{"ruleId":"262","replacedBy":"330"},{"ruleId":"284","severity":1,"message":"331","line":20,"column":10,"nodeType":"286","messageId":"287","endLine":20,"endColumn":22},{"ruleId":"284","severity":1,"message":"332","line":20,"column":24,"nodeType":"286","messageId":"287","endLine":20,"endColumn":39},{"ruleId":"264","severity":1,"message":"333","line":83,"column":6,"nodeType":"266","endLine":83,"endColumn":23,"suggestions":"334"},{"ruleId":"257","severity":1,"message":"258","line":168,"column":25,"nodeType":"259","endLine":168,"endColumn":40},{"ruleId":"284","severity":1,"message":"335","line":6,"column":10,"nodeType":"286","messageId":"287","endLine":6,"endColumn":16},{"ruleId":"284","severity":1,"message":"336","line":14,"column":7,"nodeType":"286","messageId":"287","endLine":14,"endColumn":14},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["337"],"no-negated-in-lhs",["338"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.","ArrayExpression",["339"],["337"],["338"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default",["337"],["338"],["337"],["338"],"React Hook useEffect has missing dependencies: 'eduForm' and 'infoForm'. Either include them or remove the dependency array.",["340"],["337"],["338"],"React Hook useEffect has a missing dependency: 'getBooks'. Either include it or remove the dependency array.",["341"],"no-unused-vars","'form' is assigned a value but never used.","Identifier","unusedVar","'confirm' is defined but never used.","React Hook useEffect has a missing dependency: 'getExampaper'. Either include it or remove the dependency array.",["342"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'fetchContacts'. Either include it or remove the dependency array.",["343"],["337"],["338"],"'Tooltip' is defined but never used.","'FileTextOutlined' is defined but never used.","'EyeOutlined' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["344"],"React Hook useEffect has a missing dependency: 'handleMessages'. Either include it or remove the dependency array.",["345"],["337"],["338"],"React Hook useEffect has a missing dependency: 'getNotes'. Either include it or remove the dependency array.",["346"],["337"],["338"],"React Hook useEffect has missing dependencies: 'form' and 'props.location.state'. Either include them or remove the dependency array.",["347"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["348"],"React Hook useEffect has a missing dependency: 'getAllBooks'. Either include it or remove the dependency array.",["349"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["337"],["338"],"'selectedFile' is assigned a value but never used.","'setSelectedFile' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllTutions'. Either include it or remove the dependency array.",["350"],"'Avatar' is defined but never used.","'BASEURL' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},"Update the dependencies array to be: [getUser]",{"range":"375","text":"376"},"Update the dependencies array to be: [eduForm, infoForm, userData]",{"range":"377","text":"378"},"Update the dependencies array to be: [getBooks, userData.iduser]",{"range":"379","text":"380"},"Update the dependencies array to be: [getExampaper, userData.iduser]",{"range":"381","text":"382"},"Update the dependencies array to be: [fetchContacts, userData.iduser]",{"range":"383","text":"384"},"Update the dependencies array to be: [friendDetails.roomId, getMessages]",{"range":"385","text":"386"},"Update the dependencies array to be: [handleMessages, socket]",{"range":"387","text":"388"},"Update the dependencies array to be: [getNotes, userData.iduser]",{"range":"389","text":"390"},"Update the dependencies array to be: [form, props.location.state]",{"range":"391","text":"392"},"Update the dependencies array to be: [history, location]",{"range":"393","text":"394"},"Update the dependencies array to be: [getAllBooks, userData.iduser]",{"range":"395","text":"396"},"Update the dependencies array to be: [getAllTutions, userData.iduser]",{"range":"397","text":"398"},[1474,1476],"[getUser]",[5388,5398],"[eduForm, infoForm, userData]",[1109,1126],"[getBooks, userData.iduser]",[1473,1490],"[getExampaper, userData.iduser]",[1859,1876],"[fetchContacts, userData.iduser]",[1448,1470],"[friendDetails.roomId, getMessages]",[3310,3318],"[handleMessages, socket]",[1303,1320],"[getNotes, userData.iduser]",[3493,3495],"[form, props.location.state]",[1508,1518],"[history, location]",[3025,3042],"[getAllBooks, userData.iduser]",[2348,2365],"[getAllTutions, userData.iduser]"]